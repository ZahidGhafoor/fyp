{"version":3,"file":"static/js/836.08569f0b.chunk.js","mappings":"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","sources":["pages/CategoryManagement/CategoriesList/CategoriesList.tsx","pages/CategoryManagement/CategoryFilters/CategoryFilters.tsx","pages/CategoryManagement/CategoryFilters/index.ts","pages/CategoryManagement/CategoryManagement.tsx","services/categories.service.ts"],"sourcesContent":["import { useNavigate } from \"react-router\";\nimport Button from \"components/atoms/Button\";\nimport { StyledTableCell, StyledTableRow } from \"components/templates/Tables\";\nimport {\n  Table,\n  TableRow,\n  TableBody,\n  TableHead,\n  TableContainer,\n} from \"@mui/material\";\nimport Stack from \"@mui/material/Stack\";\nimport TableLoadingWrapper from \"components/templates/TableLoadingWrapper\";\nimport { BsTrashFill } from \"react-icons/bs\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport { useEffect } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport CategoriesService from \"services/categories.service\";\nimport { MODAL } from \"redux/slices/modal\";\nimport { modalActions } from \"redux/slices/modal\";\n\nexport default function CategoriesList() {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const categories = useAppSelector((state) => state.category.categories);\n  const loading = useAppSelector((state) => state.category.loading);\n  const filter = useAppSelector((state) => state.category.filter);\n  const refreshLoader = useAppSelector((state) => state.category.refreshLoader);\n\n  useEffect(() => {\n    CategoriesService.getCategories(filter, dispatch);\n  }, [filter, dispatch]);\n\n  return (\n    <div>\n      <TableContainer>\n        <Table\n          aria-label=\"customized table\"\n          sx={{\n            minWidth: \"100%\",\n            borderSpacing: \"0 10px\",\n            borderBottomWidth: \"0px\",\n            borderCollapse: \"separate\",\n          }}\n        >\n          <TableLoadingWrapper\n            container\n            coloumns={4}\n            loading={loading}\n            message=\"No categories available\"\n            length={refreshLoader ? 0 : categories.length}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell>ID</StyledTableCell>\n                <StyledTableCell>Display Order</StyledTableCell>\n                <StyledTableCell>Name</StyledTableCell>\n                <StyledTableCell>Published</StyledTableCell>\n                <StyledTableCell></StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {categories?.map((category: any, i: number) => (\n                <StyledTableRow key={i}>\n                  <StyledTableCell>{i + 1}</StyledTableCell>\n                  <StyledTableCell>{category?.displayOrder}</StyledTableCell>\n                  <StyledTableCell>{category?.name}</StyledTableCell>\n                  <StyledTableCell>\n                    {category?.isActive === true ? \"Yes\" : \"No\"}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    <Stack direction=\"row\" spacing={2} justifyContent=\"right\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disableElevation\n                        onClick={() =>\n                          dispatch(\n                            modalActions.openModal({\n                              width: \"500px\",\n                              type: MODAL.CONFIRMATION_FORM,\n                              data: {\n                                id: category._id,\n                                type: MODAL.DELETE_CATEGORY,\n                                heading: \"Delete Category\",\n                                message:\n                                  \"Do you really want to delete this Category?\",\n                              },\n                            })\n                          )\n                        }\n                        sx={{ minWidth: \"auto\" }}\n                      >\n                        <BsTrashFill />\n                      </Button>\n                      <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        disableElevation\n                        onClick={() =>\n                          navigate(`/update-category/${category._id}`)\n                        }\n                        sx={{ minWidth: \"auto\" }}\n                      >\n                        <AiOutlineEdit />\n                      </Button>\n                    </Stack>\n                  </StyledTableCell>\n                </StyledTableRow>\n              ))}\n            </TableBody>\n          </TableLoadingWrapper>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","import { fields } from \".\";\nimport { useAppDispatch } from \"redux/hooks\";\nimport FiltersForm from \"components/templates/FiltersForm\";\nimport { categoryActions } from \"redux/slices/category/categorySlice\";\nimport { reset } from \"redux-form\";\n\nexport default function CategoryFilters() {\n  const dispatch = useAppDispatch();\n  const form = \"categoryFiltersForm\";\n\n  const handleSubmit = (values: any) => {\n    const data = { ...values };\n\n    if (data.pageSize) data.pageSize = Number(data.pageSize);\n\n    dispatch(categoryActions.setFilter({ filters: data }));\n  };\n\n  return (\n    <FiltersForm\n      onSubmit={handleSubmit}\n      myFields={fields}\n      form={form}\n      onClickReset={() => {\n        dispatch(reset(form));\n        dispatch(categoryActions.setFilter({}));\n      }}\n    />\n  );\n}\n","import InputRedux from \"components/molecules/InputRedux\";\nimport { ReduxFormField } from \"components/molecules/ReduxFormFields/index\";\nimport SelectRedux from \"components/molecules/SelectRedux\";\nexport { default } from \"./CategoryFilters\";\n\nexport const fields: ReduxFormField[] = [\n  {\n    name: \"Id\",\n    label: \"Id\",\n    component: InputRedux,\n    cellProps: { md: 4 },\n  },\n  {\n    name: \"Name\",\n    label: \"Name\",\n    component: InputRedux,\n    cellProps: { md: 4 },\n  },\n  {\n    name: \"IsPublished\",\n    label: \"Is Published\",\n    component: SelectRedux,\n    SelectProps: {\n      options: [\n        { value: \"true\", label: \"Yes\" },\n        { value: \"false\", label: \"No\" },\n      ],\n    },\n    cellProps: { md: 4 },\n  },\n  {\n    label: \"Page Size\",\n    name: \"pageSize\",\n    component: InputRedux,\n    cellProps: { md: 4 },\n  },\n];\n","import { Container, Stack } from \"@mui/material\";\nimport Button from \"components/atoms/Button\";\nimport Banner from \"components/templates/Banner\";\nimport BasicCard from \"components/templates/BasicCard\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppSelector } from \"redux/hooks\";\nimport CategoriesList from \"./CategoriesList\";\nimport CategoryFilters from \"./CategoryFilters\";\n\nexport default function CategoryManagement() {\n  const cat = useAppSelector((state) => state.category.categories);\n\n  const navigate = useNavigate();\n  return (\n    <Container maxWidth=\"lg\">\n      <Banner heading={`Category Management (${cat.length})`}>\n        <Stack direction=\"row\" spacing={2}>\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            sx={{ borderRadius: \"25px\" }}\n          >\n            Export\n          </Button>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            sx={{ borderRadius: \"25px\" }}\n            onClick={() => navigate(\"/add-category\")}\n          >\n            + Add New\n          </Button>\n        </Stack>\n      </Banner>\n      <BasicCard>\n        <CategoryFilters />\n      </BasicCard>\n      <BasicCard>\n        <CategoriesList />\n      </BasicCard>\n    </Container>\n  );\n}\n","import { formLoaderActions } from \"./../redux/slices/formLoader/formLoaderSlice\";\nimport { modalActions } from \"./../redux/slices/modal/modalSlice\";\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\nimport Promisable from \"./promisable.service\";\nimport { categoryActions } from \"redux/slices/category/categorySlice\";\nimport { NavigateFunction } from \"react-router-dom\";\n\nconst url = \"/categories\";\n\nconst CategoriesService = {\n  getCategorybyID: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/${id}`)\n    );\n\n    if (success) {\n      const { category } = success.data.data;\n      dispatch?.(categoryActions.setCategory(category));\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n  getCategories: async (data: any, dispatch?: AppDispatch) => {\n    dispatch?.(categoryActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}/filter`, data)\n    );\n\n    if (success) {\n      const categories = success.data.data;\n\n      dispatch?.(categoryActions.setCategories(categories));\n    }\n\n    dispatch?.(categoryActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  addCategory: async (\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}`, data)\n    );\n\n    if (success) {\n      const category = success.data.data;\n      dispatch?.(categoryActions.addCategory(category));\n\n      navigate?.(\"/category-management\");\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  deleteCategory: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(modalActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.delete(`${url}/${id}`)\n    );\n\n    if (success) {\n      dispatch?.(modalActions.closeModal());\n      dispatch?.(categoryActions.filterCategory(id));\n    }\n\n    dispatch?.(modalActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  updateCategory: async (\n    id: string,\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.put(`${url}/${id}`, data)\n    );\n    if (success) {\n      const { category } = success.data.data;\n      dispatch?.(categoryActions.updateCategory({ id, category }));\n      navigate?.(\"/category-management\");\n    }\n    dispatch?.(formLoaderActions.setLoading(false));\n    return [success, error];\n  },\n};\n\nexport default CategoriesService;\n"],"names":["CategoriesList","navigate","useNavigate","dispatch","useAppDispatch","categories","useAppSelector","state","category","loading","filter","refreshLoader","useEffect","CategoriesService","TableContainer","Table","sx","minWidth","borderSpacing","borderBottomWidth","borderCollapse","TableLoadingWrapper","container","coloumns","message","length","TableHead","TableRow","TableBody","map","i","displayOrder","name","isActive","align","Stack","direction","spacing","justifyContent","Button","variant","color","disableElevation","onClick","modalActions","width","type","MODAL","data","id","_id","heading","CategoryFilters","form","FiltersForm","onSubmit","values","pageSize","Number","categoryActions","filters","myFields","fields","onClickReset","reset","label","component","InputRedux","cellProps","md","SelectRedux","SelectProps","options","value","CategoryManagement","cat","Container","maxWidth","Banner","borderRadius","BasicCard","url","getCategorybyID","formLoaderActions","http","Promisable","success","error","getCategories","addCategory","deleteCategory","updateCategory"],"sourceRoot":""}