{"version":3,"file":"static/js/8961.cbe51c25.chunk.js","mappings":"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","sources":["pages/StoreZipCodes/StoreZipCodesFilters/StoreZipCodesFilters.tsx","pages/StoreZipCodes/StoreZipCodesFilters/index.ts","pages/StoreZipCodes/StoreZipCodesList/UpdateStoreZipCodesForm/UpdateStoreZipCodesForm.tsx","pages/StoreZipCodes/StoreZipCodesList/StoreZipCodesList.tsx","pages/StoreZipCodes/StoreZipCodes.tsx","services/store.service.ts","services/zipcode.service.ts"],"sourcesContent":["import FiltersForm from \"components/templates/FiltersForm\";\nimport { fields } from \".\";\nimport { zipcodeActions } from \"redux/slices/zipcode/zipcodeSlice\";\nimport { useAppDispatch } from \"redux/hooks\";\nimport { reset } from \"redux-form\";\n\nexport default function StoreZipCodesFilters() {\n  const dispatch = useAppDispatch();\n  const form = \"zipFiltersForm\";\n\n  const handleSubmit = (values: any) => {\n    const data = { ...values };\n\n    if (data.code) data.code = Number(data.code);\n    if (data.pageSize) data.pageSize = Number(data.pageSize);\n\n    dispatch(zipcodeActions.setFilter({ filters: data }));\n  };\n\n  return (\n    <FiltersForm\n      onSubmit={handleSubmit}\n      myFields={fields}\n      form={form}\n      onClickReset={() => {\n        dispatch(reset(form));\n        dispatch(zipcodeActions.setFilter({}));\n      }}\n    />\n  );\n}\n","import InputRedux from \"components/molecules/InputRedux\";\nimport { ReduxFormField } from \"components/molecules/ReduxFormFields\";\n\nexport { default } from \"./StoreZipCodesFilters\";\n\nexport const fields: ReduxFormField[] = [\n  {\n    label: \"Zip Code\",\n    name: \"code\",\n    component: InputRedux,\n    cellProps: { md: 6 },\n  },\n  {\n    label: \"Page Size\",\n    name: \"pageSize\",\n    component: InputRedux,\n    cellProps: { md: 6 },\n  },\n];\n","import { Grid } from \"@mui/material\";\nimport Button from \"components/atoms/Button\";\nimport SelectRedux from \"components/molecules/SelectRedux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { useAppSelector } from \"redux/hooks\";\nimport { required } from \"utils/validate.util\";\n\nconst UpdateStoreZipCodesForm = ({ handleSubmit }: any) => {\n  const storeOptions = useAppSelector((state) => state.store.storeOptions);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container columnSpacing={2}>\n        <Grid item md={8}>\n          <Field\n            name={\"store_id\"}\n            validate={[required]}\n            component={SelectRedux}\n            SelectProps={{ options: storeOptions }}\n          />\n        </Grid>\n        <Grid item md={4}>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            disableElevation\n            fullWidth\n            sx={{ height: \"100%\" }}\n          >\n            Update Zip Code\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n\nexport default reduxForm({})(UpdateStoreZipCodesForm);\n","import Button from \"components/atoms/Button\";\nimport { StyledTableCell, StyledTableRow } from \"components/templates/Tables\";\nimport {\n  Table,\n  TableRow,\n  TableBody,\n  TableHead,\n  TableContainer,\n  Grid,\n} from \"@mui/material\";\nimport TableLoadingWrapper from \"components/templates/TableLoadingWrapper\";\nimport Select from \"components/atoms/Select\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport ZipCodeService from \"services/zipcode.service\";\nimport { useEffect } from \"react\";\nimport UpdateStoreZipCodesForm from \"./UpdateStoreZipCodesForm\";\nimport StoresService from \"services/store.service\";\nimport { change } from \"redux-form\";\nimport ToasterService from \"utils/toaster.util\";\nimport { zipcodeActions } from \"redux/slices/zipcode/zipcodeSlice\";\nimport { storeActions } from \"redux/slices/store/storeSlice\";\n\nexport default function StoreZipCodesList() {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const stores = useAppSelector((state) => state.store.stores);\n  const filter = useAppSelector((state) => state.zipcode.filter);\n  const loading = useAppSelector((state) => state.zipcode.loading);\n  const storeMap = useAppSelector((state) => state.store.storeMap);\n  const zipcodes = useAppSelector((state) => state.zipcode.zipcodes);\n  const refreshLoader = useAppSelector((state) => state.zipcode.refreshLoader);\n\n  useEffect(() => {\n    StoresService.getStores(dispatch);\n    ZipCodeService.getZipCodes(filter, dispatch);\n  }, [filter, dispatch]);\n\n  useEffect(() => {\n    if (stores.length === 0) return;\n\n    zipcodes.forEach(({ storeId }: any, i: number) => {\n      if (storeId)\n        dispatch(change(`UpdateStoreZipCodesForm${i}`, \"store_id\", storeId));\n    });\n  }, [dispatch, stores, zipcodes]);\n\n  return (\n    <TableContainer>\n      <Table\n        aria-label=\"customized table\"\n        sx={{\n          minWidth: \"100%\",\n          borderSpacing: \"0 10px\",\n          borderBottomWidth: \"0px\",\n          borderCollapse: \"separate\",\n        }}\n      >\n        <TableLoadingWrapper\n          container\n          coloumns={2}\n          loading={loading}\n          message=\"No zipcodes available\"\n          length={refreshLoader ? 0 : zipcodes.length}\n        >\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Zip Code</StyledTableCell>\n              <StyledTableCell>Store</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {zipcodes.map((zipcode: any, index: any) => (\n              <StyledTableRow key={index}>\n                <StyledTableCell>{zipcode.code}</StyledTableCell>\n                <StyledTableCell>\n                  <UpdateStoreZipCodesForm\n                    form={`UpdateStoreZipCodesForm${index}`}\n                    onSubmit={async (values: any) => {\n                      const { store_id } = values;\n                      let zipcodes = storeMap[store_id].zipCodes || [];\n\n                      if (zipcodes.includes(zipcode._id)) return;\n                      let data = { zipCodes: [...zipcodes, zipcode._id] };\n                      const [success] = await StoresService.updateStore(\n                        `${store_id}`,\n                        data,\n                        dispatch\n                      );\n                      if (success) {\n                        if (zipcode.storeId)\n                          dispatch(\n                            storeActions.filterStoreZipcode({\n                              id: zipcode.storeId,\n                              zipcode_id: zipcode._id,\n                            })\n                          );\n\n                        dispatch(\n                          zipcodeActions.updateZipCode({\n                            id: zipcode._id,\n                            zipcode: {\n                              ...zipcode,\n                              storeId: store_id,\n                              store: storeMap[store_id].name,\n                            },\n                          })\n                        );\n                      }\n                    }}\n                  />\n                </StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </TableLoadingWrapper>\n      </Table>\n    </TableContainer>\n  );\n}\n","import { Container } from \"@mui/material\";\nimport Banner from \"components/templates/Banner\";\nimport BasicCard from \"components/templates/BasicCard\";\nimport React from \"react\";\nimport { useAppSelector } from \"redux/hooks\";\nimport StoreZipCodesFilters from \"./StoreZipCodesFilters\";\nimport StoreZipCodesList from \"./StoreZipCodesList\";\n\nexport default function StoreZipCodes() {\n  const zipcodes = useAppSelector((state) => state.zipcode.zipcodes);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Banner heading={`Store Zip Codes (${zipcodes.length})`}></Banner>\n      <BasicCard>\n        <StoreZipCodesFilters />\n      </BasicCard>\n      <BasicCard>\n        <StoreZipCodesList />\n      </BasicCard>\n    </Container>\n  );\n}\n","import { zipcodeActions } from \"redux/slices/zipcode/zipcodeSlice\";\nimport { formLoaderActions } from \"redux/slices/formLoader\";\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\n\nimport { storeActions } from \"redux/slices/store/storeSlice\";\n\nimport Promisable from \"./promisable.service\";\nimport { NavigateFunction } from \"react-router-dom\";\nimport { modalActions } from \"redux/slices/modal\";\n\nconst url = \"/store\";\n\nconst StoresService = {\n  getStorebyID: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/${id}`)\n    );\n\n    if (success) {\n      const { store } = success.data.data;\n      dispatch?.(storeActions.setStore(store));\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  getStores: async (data: any, dispatch?: AppDispatch) => {\n    dispatch?.(storeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}/filter`, data)\n    );\n\n    if (success) {\n      const { stores } = success.data.data;\n      dispatch?.(storeActions.setStores(stores));\n    }\n\n    dispatch?.(storeActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  addStore: async (\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(storeActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}`, data)\n    );\n    if (success) {\n      const store = success.data.data.store;\n      dispatch?.(storeActions.addStore(store));\n      navigate?.(\"/store-management\");\n    }\n    dispatch?.(storeActions.setLoading(false));\n    return [success, error];\n  },\n\n  deleteStore: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(modalActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.delete(`${url}/${id}`)\n    );\n\n    if (success) {\n      dispatch?.(modalActions.closeModal());\n      dispatch?.(storeActions.deleteStore(id));\n    }\n    dispatch?.(modalActions.setLoading(false));\n    return [success, error];\n  },\n\n  updateStore: async (\n    id: string,\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.put(`${url}/${id}`, data)\n    );\n    if (success) {\n      const store = success.data.data;\n      dispatch?.(storeActions.updateStore({ id, store }));\n      navigate?.(\"/store-management\");\n    }\n    dispatch?.(formLoaderActions.setLoading(false));\n    return [success, error];\n  },\n};\n\nexport default StoresService;\n","import { NavigateFunction } from \"react-router-dom\";\nimport { zipcodeActions } from \"./../redux/slices/zipcode/zipcodeSlice\";\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\nimport Promisable from \"./promisable.service\";\nimport { modalActions } from \"redux/slices/modal\";\nimport { formLoaderActions } from \"redux/slices/formLoader\";\n\nconst url = `/zipcode`;\n\nconst ZipCodeService = {\n  getZipCodebyID: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/${id}`)\n    );\n\n    if (success) {\n      const { zipcode } = success.data.data;\n      dispatch?.(zipcodeActions.setZipCode(zipcode));\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  getZipCodes: async (data: any, dispatch?: AppDispatch) => {\n    dispatch?.(zipcodeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}/filter`, data)\n    );\n\n    if (success) {\n      const { zipcodes } = success.data.data;\n      dispatch?.(zipcodeActions.setZipCodes(zipcodes));\n    }\n\n    dispatch?.(zipcodeActions.setLoading(false));\n\n    return [success, error];\n  },\n  getZipCodesRequest: async (dispatch?: AppDispatch) => {\n    dispatch?.(zipcodeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/all-requested-zipcodes`)\n    );\n\n    if (success) {\n      const { requestedZipCodes } = success.data.data;\n      dispatch?.(zipcodeActions.setZipCodesRequest(requestedZipCodes));\n    }\n\n    dispatch?.(zipcodeActions.setLoading(false));\n\n    return [success, error];\n  },\n  getMostRequestedZipCodes: async (dispatch?: AppDispatch) => {\n    dispatch?.(zipcodeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/requested-zipcodes-group`)\n    );\n\n    if (success) {\n      const { requestedZipCodes } = success.data.data;\n      dispatch?.(zipcodeActions.setmostRequestZipCodes(requestedZipCodes));\n\n      console.log(\"our bje are ======\", requestedZipCodes);\n    }\n\n    dispatch?.(zipcodeActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  createZipCodes: async (\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}`, data)\n    );\n\n    if (success) {\n      navigate?.(\"/zip-code-management\");\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  deleteZipCodes: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(modalActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.delete(`${url}/${id}`)\n    );\n\n    if (success) {\n      dispatch?.(modalActions.closeModal());\n      dispatch?.(zipcodeActions.filterZipCode(id));\n    }\n\n    dispatch?.(modalActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  updateZipCode: async (\n    id: string,\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.put(`${url}/${id}`, data)\n    );\n    if (success) {\n      const zipcode = success.data.data;\n      dispatch?.(zipcodeActions.updateZipCode({ id, zipcode }));\n      navigate?.(\"/zip-code-management\");\n    }\n    dispatch?.(formLoaderActions.setLoading(false));\n    return [success, error];\n  },\n};\n\nexport default ZipCodeService;\n"],"names":["StoreZipCodesFilters","dispatch","useAppDispatch","form","FiltersForm","onSubmit","values","data","code","Number","pageSize","zipcodeActions","filters","myFields","fields","onClickReset","reset","label","name","component","InputRedux","cellProps","md","reduxForm","handleSubmit","storeOptions","useAppSelector","state","store","Grid","container","columnSpacing","item","Field","validate","required","SelectRedux","SelectProps","options","Button","type","variant","color","disableElevation","fullWidth","sx","height","StoreZipCodesList","useNavigate","stores","filter","zipcode","loading","storeMap","zipcodes","refreshLoader","useEffect","StoresService","ZipCodeService","length","forEach","i","storeId","change","TableContainer","Table","minWidth","borderSpacing","borderBottomWidth","borderCollapse","TableLoadingWrapper","coloumns","message","TableHead","TableRow","TableBody","map","index","store_id","zipCodes","includes","_id","storeActions","id","zipcode_id","StoreZipCodes","Container","maxWidth","Banner","heading","BasicCard","url","getStorebyID","formLoaderActions","http","Promisable","success","error","getStores","addStore","navigate","deleteStore","modalActions","updateStore","getZipCodebyID","getZipCodes","getZipCodesRequest","requestedZipCodes","getMostRequestedZipCodes","console","log","createZipCodes","deleteZipCodes","updateZipCode"],"sourceRoot":""}