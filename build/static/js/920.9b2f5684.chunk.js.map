{"version":3,"file":"static/js/920.9b2f5684.chunk.js","mappings":"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","sources":["pages/FailedOrders/FailedOrdersFilters/FailedOrdersFilters.tsx","pages/FailedOrders/FailedOrdersFilters/index.ts","pages/FailedOrders/FailedOrdersList/FailedOrdersList.tsx","pages/FailedOrders/FailedOrders.tsx","services/order.service.ts"],"sourcesContent":["import { fields } from \".\";\nimport FiltersForm from \"components/templates/FiltersForm\";\n\nexport default function FailedOrdersFilters() {\n  const handleSubmit = (values: any) => {};\n\n  return <FiltersForm onSubmit={handleSubmit} myFields={fields} />;\n}\n","import DatePickerRedux from \"components/molecules/DatePickerRedux\";\nimport InputRedux from \"components/molecules/InputRedux\";\nimport { ReduxFormField } from \"components/molecules/ReduxFormFields/index\";\nimport SelectRedux from \"components/molecules/SelectRedux\";\nexport { default } from \"./FailedOrdersFilters\";\n\nexport const fields: ReduxFormField[] = [\n  {\n    name: \"id\",\n    label: \"Id\",\n    component: InputRedux,\n    cellProps: { md: 6 },\n  },\n  {\n    name: \"store\",\n    label: \"Store\",\n    component: SelectRedux,\n    SelectProps: {\n      options: [\n        { value: \"Yes\", label: \"Lager Moabit\" },\n        { value: \"No\", label: \"Test Shop\" },\n        { value: \"No\", label: \"Lager Neukolln\" },\n      ],\n    },\n    cellProps: { md: 6 },\n  },\n  {\n    name: \"account_name\",\n    label: \"Account Name\",\n    component: InputRedux,\n    cellProps: { md: 4 },\n  },\n  {\n    name: \"account_phone\",\n    label: \"Account Phone\",\n    component: InputRedux,\n    cellProps: { md: 4 },\n  },\n  {\n    name: \"account_email\",\n    label: \"Account Email\",\n    component: InputRedux,\n    cellProps: { md: 4 },\n  },\n  {\n    name: \"payment_status\",\n    label: \"Payment Status\",\n    component: SelectRedux,\n    SelectProps: {\n      options: [\n        { value: \"Yes\", label: \"Paid\" },\n        { value: \"No\", label: \"Partially Refunded\" },\n        { value: \"No\", label: \"Refunded\" },\n      ],\n    },\n    cellProps: { md: 6 },\n  },\n  {\n    name: \"order_status\",\n    label: \"Order Status\",\n    component: SelectRedux,\n    SelectProps: {\n      options: [\n        { value: \"Yes\", label: \"Pending\" },\n        { value: \"No\", label: \"Processing\" },\n        { value: \"No\", label: \"Processed\" },\n        { value: \"No\", label: \"Delivering\" },\n        { value: \"No\", label: \"Arrived\" },\n        { value: \"No\", label: \"Complete\" },\n        { value: \"No\", label: \"Cancelled\" },\n      ],\n    },\n    cellProps: { md: 6 },\n  },\n  {\n    label: \"Minimum Cart\",\n    name: \"minimum_cart\",\n    component: InputRedux,\n    cellProps: { md: 6 },\n  },\n  {\n    label: \"Maximum Cart\",\n    name: \"maximum_cart\",\n    component: InputRedux,\n    cellProps: { md: 6 },\n  },\n  {\n    label: \"Date Start\",\n    name: \"date_start\",\n    component: DatePickerRedux,\n    cellProps: { md: 6 },\n  },\n  {\n    label: \"Date End\",\n    name: \"date_end\",\n    component: DatePickerRedux,\n    cellProps: { md: 6 },\n  },\n  {\n    label: \"Page Size\",\n    name: \"page_size\",\n    component: InputRedux,\n    cellProps: { md: 6 },\n  },\n];\n","import { StyledTableCell, StyledTableRow } from \"components/templates/Tables\";\nimport {\n  Table,\n  TableRow,\n  TableBody,\n  TableHead,\n  TableContainer,\n} from \"@mui/material\";\nimport TableLoadingWrapper from \"components/templates/TableLoadingWrapper\";\nimport Button from \"components/atoms/Button\";\nimport { useNavigate } from \"react-router-dom\";\nimport { BiLinkExternal } from \"react-icons/bi\";\nimport { useAppSelector } from \"redux/hooks\";\nimport { useAppDispatch } from \"redux/hooks\";\nimport OrderService from \"services/order.service\";\nimport { useEffect } from \"react\";\n\nexport default function FailedOrdersList() {\n  const navigate = useNavigate();\n    const dispatch = useAppDispatch();\n    const allOrders = useAppSelector((state) => state.order.orders);\n    const loading = useAppSelector((state) => state.order.orders);\n\n    const rejectedOrders = allOrders.filter(order => order.orderStatus == \"rejected\")\n\n    useEffect(() => {\n      OrderService.getAllOrders(dispatch);\n    }, [dispatch]);\n\n  return (\n    <div>\n      <TableContainer>\n        <Table\n          aria-label=\"customized table\"\n          sx={{\n            minWidth: \"100%\",\n            borderSpacing: \"0 10px\",\n            borderBottomWidth: \"0px\",\n            borderCollapse: \"separate\",\n          }}\n        >\n          <TableLoadingWrapper\n            container\n            coloumns={4}\n            loading={false}\n            message=\"No active orders available\"\n            length={10}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell>Id</StyledTableCell>\n                <StyledTableCell>First Name</StyledTableCell>\n                <StyledTableCell>Last Name</StyledTableCell>\n                <StyledTableCell>Phone</StyledTableCell>\n                <StyledTableCell>Order Status</StyledTableCell>\n                <StyledTableCell>Zip Code</StyledTableCell>\n                <StyledTableCell>Total</StyledTableCell>\n                <StyledTableCell>Date</StyledTableCell>\n                <StyledTableCell></StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rejectedOrders.map((order: any) => (\n                <StyledTableRow key={order.id}>\n                  <StyledTableCell>{order.id}</StyledTableCell>\n                  <StyledTableCell>{order.firstName}</StyledTableCell>\n                  <StyledTableCell>{order.lastName}</StyledTableCell>\n                  <StyledTableCell>{order.phone}</StyledTableCell>\n                  <StyledTableCell>{order.orderStatus}</StyledTableCell>\n                  <StyledTableCell>{order.storeName}</StyledTableCell>\n                  <StyledTableCell>{order.total}</StyledTableCell>\n                  <StyledTableCell>{order.date}</StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    <Button\n                      // size=\"large\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disableElevation\n                      onClick={() => navigate(`/order-details/${order.id}`)}\n                      sx={{ minWidth: \"auto\" }}\n                    >\n                      <BiLinkExternal /> Details\n                    </Button>\n                  </StyledTableCell>\n                </StyledTableRow>\n              ))}\n            </TableBody>\n          </TableLoadingWrapper>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","import { Container } from \"@mui/material\";\nimport Button from \"components/atoms/Button\";\nimport Banner from \"components/templates/Banner\";\nimport BasicCard from \"components/templates/BasicCard\";\nimport OrdersFilters from \"./FailedOrdersFilters\";\nimport OrdersList from \"./FailedOrdersList\";\n\nexport default function FailedOrders() {\n  return (\n    <Container maxWidth=\"lg\">\n      <Banner heading=\"Failed Orders (55210)\">\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          sx={{ borderRadius: \"25px\" }}\n        >\n          Export\n        </Button>\n      </Banner>\n      <BasicCard>\n        <OrdersFilters />\n      </BasicCard>\n      <BasicCard>\n        <OrdersList />\n      </BasicCard>\n    </Container>\n  );\n}\n","import { formLoaderActions } from \"./../redux/slices/formLoader/formLoaderSlice\";\nimport { orderActions } from \"../redux/slices/order/orderSlice\";\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\nimport Promisable from \"./promisable.service\";\nimport { NavigateFunction } from \"react-router-dom\";\n\nconst url = `/orders`;\n\nconst OrderService = {\n  getAllOrders: async (dispatch?: AppDispatch) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}`)\n    );\n\n    if (success) {\n      const { allOrders } = success.data.data;\n      dispatch?.(orderActions.setOrders(allOrders));\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n  getAccountWithMostOrders: async (dispatch?: AppDispatch) => {\n    dispatch?.(orderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/account-with-most-orders`)\n    );\n\n    if (success) {\n      const { accountWithMostOrders } = success.data.data;\n\n      dispatch?.(orderActions.setMostOrders(accountWithMostOrders));\n    }\n\n    dispatch?.(orderActions.setLoading(false));\n\n    return [success, error];\n  },\n};\n\nexport default OrderService;\n"],"names":["FailedOrdersFilters","FiltersForm","onSubmit","values","myFields","fields","name","label","component","InputRedux","cellProps","md","SelectRedux","SelectProps","options","value","DatePickerRedux","FailedOrdersList","navigate","useNavigate","dispatch","useAppDispatch","allOrders","useAppSelector","state","order","orders","rejectedOrders","filter","orderStatus","useEffect","OrderService","TableContainer","Table","sx","minWidth","borderSpacing","borderBottomWidth","borderCollapse","TableLoadingWrapper","container","coloumns","loading","message","length","TableHead","TableRow","TableBody","map","id","firstName","lastName","phone","storeName","total","date","align","Button","variant","color","disableElevation","onClick","FailedOrders","Container","maxWidth","Banner","heading","borderRadius","BasicCard","url","getAllOrders","formLoaderActions","http","Promisable","success","error","data","orderActions","getAccountWithMostOrders","accountWithMostOrders"],"sourceRoot":""}