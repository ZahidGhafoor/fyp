{"version":3,"file":"static/js/6666.81f4beee.chunk.js","mappings":"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","sources":["pages/StoreManagement/StoreFilters/StoreFilters.tsx","pages/StoreManagement/StoreFilters/index.ts","pages/StoreManagement/StoresList/StoresList.tsx","pages/StoreManagement/StoreManagement.tsx","services/store.service.ts"],"sourcesContent":["import FiltersForm from \"components/templates/FiltersForm\";\nimport { reset } from \"redux-form\";\nimport { useAppDispatch } from \"redux/hooks\";\nimport { storeActions } from \"redux/slices/store/storeSlice\";\nimport { fields } from \".\";\n\nexport default function CategoryFilters() {\n  const dispatch = useAppDispatch();\n  const form = \"storeFiltersForm\";\n  const handleSubmit = (values: any) => {\n    const data = { ...values };\n\n    if (data.pageSize) data.pageSize = Number(data.pageSize);\n\n    dispatch(storeActions.setFilter({ filters: data }));\n  };\n\n  return (\n    <FiltersForm\n      onSubmit={handleSubmit}\n      myFields={fields}\n      form={form}\n      onClickReset={() => {\n        dispatch(reset(form));\n        dispatch(storeActions.setFilter({}));\n      }}\n    />\n  );\n}\n","import InputRedux from \"components/molecules/InputRedux\";\nimport { ReduxFormField } from \"components/molecules/ReduxFormFields\";\n\nexport { default } from \"./StoreFilters\";\n\nexport const fields: ReduxFormField[] = [\n  {\n    label: \"Page Size\",\n    name: \"pageSize\",\n    component: InputRedux,\n    cellProps: { md: 4 },\n  },\n];\n","import Button from \"components/atoms/Button\";\nimport { StyledTableCell, StyledTableRow } from \"components/templates/Tables\";\nimport {\n  Table,\n  TableRow,\n  TableBody,\n  TableHead,\n  TableContainer,\n} from \"@mui/material\";\nimport Stack from \"@mui/material/Stack\";\nimport TableLoadingWrapper from \"components/templates/TableLoadingWrapper\";\nimport { BsTrashFill } from \"react-icons/bs\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport { useEffect } from \"react\";\nimport StoresService from \"services/store.service\";\nimport { MODAL } from \"redux/slices/modal\";\nimport { modalActions } from \"redux/slices/modal\";\n\nexport default function StoresList() {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const loading = useAppSelector((state) => state.store.loading);\n  const storeData = useAppSelector((state) => state.store.stores);\n  const filter = useAppSelector((state) => state.store.filter);\n  const refreshLoader = useAppSelector((state) => state.store.refreshLoader);\n\n  useEffect(() => {\n    StoresService.getStores(filter, dispatch);\n  }, [filter, dispatch]);\n\n  return (\n    <TableContainer>\n      <Table\n        aria-label=\"customized table\"\n        sx={{\n          minWidth: \"100%\",\n          borderSpacing: \"0 10px\",\n          borderBottomWidth: \"0px\",\n          borderCollapse: \"separate\",\n        }}\n      >\n        <TableLoadingWrapper\n          container\n          coloumns={4}\n          loading={loading}\n          message=\"No Stores available\"\n          length={refreshLoader ? 0 : storeData.length}\n        >\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Name</StyledTableCell>\n              <StyledTableCell></StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {storeData.map((store: any, index: number) => (\n              <StyledTableRow key={index}>\n                <StyledTableCell>{store.name}</StyledTableCell>\n                <StyledTableCell align=\"right\">\n                  <Stack direction=\"row\" spacing={2} justifyContent=\"right\">\n                    <Button\n                      size=\"small\"\n                      variant=\"contained\"\n                      color=\"error\"\n                      disableElevation\n                      onClick={() =>\n                        dispatch(\n                          modalActions.openModal({\n                            width: \"500px\",\n                            type: MODAL.CONFIRMATION_FORM,\n                            data: {\n                              id: store._id,\n                              type: MODAL.DELETE_STORE,\n                              heading: \"Delete Store\",\n                              message:\n                                \"Do you really want to delete this Store?\",\n                            },\n                          })\n                        )\n                      }\n                      sx={{ minWidth: \"auto\" }}\n                    >\n                      <BsTrashFill />\n                    </Button>\n                    <Button\n                      size=\"small\"\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      disableElevation\n                      onClick={() => navigate(`/update-store/${store._id}`)}\n                      sx={{ minWidth: \"auto\" }}\n                    >\n                      <AiOutlineEdit />\n                    </Button>\n                  </Stack>\n                </StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </TableLoadingWrapper>\n      </Table>\n    </TableContainer>\n  );\n}\n","import { Container, Stack } from \"@mui/material\";\nimport Button from \"components/atoms/Button\";\nimport Banner from \"components/templates/Banner\";\nimport BasicCard from \"components/templates/BasicCard\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppSelector } from \"redux/hooks\";\nimport StoreFilters from \"./StoreFilters\";\nimport StoresList from \"./StoresList\";\n\nexport default function StoreManagement() {\n  const store = useAppSelector((state) => state.store.stores);\n\n  const navigate = useNavigate();\n  return (\n    <Container maxWidth=\"lg\">\n      <Banner heading={`Store Management (${store?.length})`}>\n        <Stack direction=\"row\" spacing={2}>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            sx={{ borderRadius: \"25px\" }}\n            onClick={() => navigate(\"/add-store\")}\n          >\n            + Add New\n          </Button>\n        </Stack>\n      </Banner>\n      <BasicCard>\n        <StoreFilters />\n      </BasicCard>\n      <BasicCard>\n        <StoresList />\n      </BasicCard>\n    </Container>\n  );\n}\n","import { zipcodeActions } from \"redux/slices/zipcode/zipcodeSlice\";\nimport { formLoaderActions } from \"redux/slices/formLoader\";\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\n\nimport { storeActions } from \"redux/slices/store/storeSlice\";\n\nimport Promisable from \"./promisable.service\";\nimport { NavigateFunction } from \"react-router-dom\";\nimport { modalActions } from \"redux/slices/modal\";\n\nconst url = \"/store\";\n\nconst StoresService = {\n  getStorebyID: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/${id}`)\n    );\n\n    if (success) {\n      const { store } = success.data.data;\n      dispatch?.(storeActions.setStore(store));\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  getStores: async (data: any, dispatch?: AppDispatch) => {\n    dispatch?.(storeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}/filter`, data)\n    );\n\n    if (success) {\n      const { stores } = success.data.data;\n      dispatch?.(storeActions.setStores(stores));\n    }\n\n    dispatch?.(storeActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  addStore: async (\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(storeActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}`, data)\n    );\n    if (success) {\n      const store = success.data.data.store;\n      dispatch?.(storeActions.addStore(store));\n      navigate?.(\"/store-management\");\n    }\n    dispatch?.(storeActions.setLoading(false));\n    return [success, error];\n  },\n\n  deleteStore: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(modalActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.delete(`${url}/${id}`)\n    );\n\n    if (success) {\n      dispatch?.(modalActions.closeModal());\n      dispatch?.(storeActions.deleteStore(id));\n    }\n    dispatch?.(modalActions.setLoading(false));\n    return [success, error];\n  },\n\n  updateStore: async (\n    id: string,\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.put(`${url}/${id}`, data)\n    );\n    if (success) {\n      const store = success.data.data;\n      dispatch?.(storeActions.updateStore({ id, store }));\n      navigate?.(\"/store-management\");\n    }\n    dispatch?.(formLoaderActions.setLoading(false));\n    return [success, error];\n  },\n};\n\nexport default StoresService;\n"],"names":["CategoryFilters","dispatch","useAppDispatch","form","FiltersForm","onSubmit","values","data","pageSize","Number","storeActions","filters","myFields","fields","onClickReset","reset","label","name","component","InputRedux","cellProps","md","StoresList","navigate","useNavigate","loading","useAppSelector","state","store","storeData","stores","filter","refreshLoader","useEffect","StoresService","TableContainer","Table","sx","minWidth","borderSpacing","borderBottomWidth","borderCollapse","TableLoadingWrapper","container","coloumns","message","length","TableHead","TableRow","TableBody","map","index","align","Stack","direction","spacing","justifyContent","Button","size","variant","color","disableElevation","onClick","modalActions","width","type","MODAL","id","_id","heading","StoreManagement","Container","maxWidth","Banner","borderRadius","BasicCard","url","getStorebyID","formLoaderActions","http","Promisable","success","error","getStores","addStore","deleteStore","updateStore"],"sourceRoot":""}