{"version":3,"file":"static/js/9585.aea9a97e.chunk.js","mappings":"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","sources":["pages/AddZipCodeMang/AddZipCodeForm/AddZipCodeForm.tsx","pages/AddZipCodeMang/AddZipCodeForm/index.ts","components/organisms/SelectCity/SelectCity.tsx","pages/AddZipCodeMang/UpdateZipCodeForm/UpdateZipCodeForm.tsx","pages/AddZipCodeMang/AddZipCode.tsx","services/city.service.ts","services/zipcode.service.ts"],"sourcesContent":["import ReduxFormFields from \"components/molecules/ReduxFormFields\";\nimport { reduxForm } from \"redux-form\";\nimport { fields} from \".\";\nimport Button from \"components/atoms/Button\";\n\n\nconst AddZipCodeForm  = ({ handleSubmit }: any) =>  {\n    return (\n        <form\n          onSubmit={handleSubmit}\n        >\n          <ReduxFormFields fields={fields} />\n          <br />\n          <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n            Submit\n          </Button>\n        </form>\n      );\n}\n\nexport default reduxForm({\n    form: \"AddZipCodeForm\",\n  })(AddZipCodeForm);","import InputRedux from \"components/molecules/InputRedux\";\nimport { ReduxFormField } from \"components/molecules/ReduxFormFields\";\nimport SelectCity from \"components/organisms/SelectCity\";\nimport { number, required } from \"utils/validate.util\";\n\nexport { default } from \"./AddZipCodeForm\";\n\nexport const fields: ReduxFormField[] = [\n  {\n    label: \"Zip Code\",\n    name: \"code\",\n    validate: [number, required],\n    component: InputRedux,\n    cellProps: { md: 6 },\n  },\n  {\n    label: \"Neighborhood\",\n    name: \"cityId\",\n    component: SelectCity,\n    validate: [required],\n    cellProps: { md: 6 },\n  },\n  {\n    label: \"Latitude\",\n    name: \"lat\",\n    component: InputRedux,\n    validate: [number, required],\n    cellProps: { md: 6 },\n  },\n  {\n    label: \"Longitude\",\n    name: \"lng\",\n    component: InputRedux,\n    validate: [number, required],\n    cellProps: { md: 6 },\n  },\n];\n","import { useEffect } from \"react\";\nimport CityService from \"services/city.service\";\nimport SelectRedux from \"components/molecules/SelectRedux\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport { cityActions } from \"redux/slices/city/citySlice\";\n\nexport default function SelectCity(props: any) {\n  const dispatch = useAppDispatch();\n  const cityOptions = useAppSelector((state) => state.city.cityOptions);\n\n  useEffect(() => {\n    CityService.getCities(dispatch);\n\n    return () => {\n      dispatch(cityActions.clear());\n    };\n  }, [dispatch]);\n\n  return <SelectRedux {...props} options={cityOptions} />;\n}\n","import { useEffect } from \"react\";\nimport { change } from \"redux-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport ZipCodeService from \"services/zipcode.service\";\nimport { zipcodeActions } from \"redux/slices/zipcode/zipcodeSlice\";\n\nexport default function AddZipCodeForm({ id }: any) {\n  const form = \"AddZipCodeForm\";\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const zipcode = useAppSelector((state) => state.zipcode.zipcode);\n\n  useEffect(() => {\n    ZipCodeService.getZipCodebyID(`${id}`, dispatch);\n    return () => {\n      dispatch(zipcodeActions.setZipCode(null));\n    };\n  }, [id, dispatch]);\n\n  useEffect(() => {\n    if (!zipcode || zipcode?.data === \"Not Found\") return;\n    const { code, lat, lng, cityId } = zipcode;\n    dispatch(change(form, \"code\", code));\n    dispatch(change(form, \"lat\", lat));\n    dispatch(change(form, \"lng\", lng));\n    dispatch(change(form, \"cityId\", cityId));\n  }, [zipcode, navigate, dispatch]);\n\n  return null;\n}\n","import { Container } from \"@mui/material\";\nimport CircleLoader from \"components/atoms/CircleLoader\";\nimport GoBack from \"components/atoms/GoBack\";\nimport Banner from \"components/templates/Banner\";\nimport BasicCard from \"components/templates/BasicCard\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport ZipCodeService from \"services/zipcode.service\";\nimport AddZipCodeForm from \"./AddZipCodeForm\";\nimport UpdateZipCodeForm from \"./UpdateZipCodeForm\";\n\nexport default function AddZipCode() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const loading = useAppSelector((state) => state.formLoader.loading);\n\n  const handleSubmit = (values: any) => {\n    if (id) ZipCodeService.updateZipCode(`${id}`, values, dispatch, navigate);\n    else ZipCodeService.createZipCodes(values, dispatch, navigate);\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <GoBack path=\"/zip-code-management\" title=\"Zip Code\" />\n      <Banner heading=\"Add Zip Code\" />\n      <BasicCard>\n        {loading && <CircleLoader />}\n        <AddZipCodeForm onSubmit={handleSubmit} />\n        {id && <UpdateZipCodeForm id={id} />}\n      </BasicCard>\n    </Container>\n  );\n}\n","import { NavigateFunction } from \"react-router-dom\";\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\nimport Promisable from \"./promisable.service\";\nimport { modalActions } from \"redux/slices/modal\";\nimport { formLoaderActions } from \"redux/slices/formLoader\";\nimport { cityActions } from \"redux/slices/city/citySlice\";\n\nconst url = `/city`;\n\nconst CityService = {\n  getCitybyID: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/${id}`)\n    );\n\n    if (success) {\n      const { city } = success.data.data;\n      dispatch?.(cityActions.setCity(city));\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  getCities: async (dispatch?: AppDispatch) => {\n    dispatch?.(cityActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}`)\n    );\n\n    if (success) {\n      const { cities } = success.data.data;\n      dispatch?.(cityActions.setCities(cities));\n    }\n\n    dispatch?.(cityActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  createCity: async (\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}`, data)\n    );\n\n    if (success) {\n      navigate?.(\"/city-management\");\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  deleteCity: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(modalActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.delete(`${url}/${id}`)\n    );\n\n    if (success) {\n      dispatch?.(modalActions.closeModal());\n      dispatch?.(cityActions.filterCity(id));\n    }\n\n    dispatch?.(modalActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  updateCity: async (\n    id: string,\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.put(`${url}/${id}`, data)\n    );\n    if (success) {\n      const city = success.data.data;\n      dispatch?.(cityActions.updateCity({ id, city }));\n      navigate?.(\"/city-management\");\n    }\n    dispatch?.(formLoaderActions.setLoading(false));\n    return [success, error];\n  },\n};\n\nexport default CityService;\n","import { NavigateFunction } from \"react-router-dom\";\nimport { zipcodeActions } from \"./../redux/slices/zipcode/zipcodeSlice\";\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\nimport Promisable from \"./promisable.service\";\nimport { modalActions } from \"redux/slices/modal\";\nimport { formLoaderActions } from \"redux/slices/formLoader\";\n\nconst url = `/zipcode`;\n\nconst ZipCodeService = {\n  getZipCodebyID: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/${id}`)\n    );\n\n    if (success) {\n      const { zipcode } = success.data.data;\n      dispatch?.(zipcodeActions.setZipCode(zipcode));\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  getZipCodes: async (data: any, dispatch?: AppDispatch) => {\n    dispatch?.(zipcodeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}/filter`, data)\n    );\n\n    if (success) {\n      const { zipcodes } = success.data.data;\n      dispatch?.(zipcodeActions.setZipCodes(zipcodes));\n    }\n\n    dispatch?.(zipcodeActions.setLoading(false));\n\n    return [success, error];\n  },\n  getZipCodesRequest: async (dispatch?: AppDispatch) => {\n    dispatch?.(zipcodeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/all-requested-zipcodes`)\n    );\n\n    if (success) {\n      const { requestedZipCodes } = success.data.data;\n      dispatch?.(zipcodeActions.setZipCodesRequest(requestedZipCodes));\n    }\n\n    dispatch?.(zipcodeActions.setLoading(false));\n\n    return [success, error];\n  },\n  getMostRequestedZipCodes: async (dispatch?: AppDispatch) => {\n    dispatch?.(zipcodeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/requested-zipcodes-group`)\n    );\n\n    if (success) {\n      const { requestedZipCodes } = success.data.data;\n      dispatch?.(zipcodeActions.setmostRequestZipCodes(requestedZipCodes));\n\n      console.log(\"our bje are ======\", requestedZipCodes);\n    }\n\n    dispatch?.(zipcodeActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  createZipCodes: async (\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}`, data)\n    );\n\n    if (success) {\n      navigate?.(\"/zip-code-management\");\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  deleteZipCodes: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(modalActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.delete(`${url}/${id}`)\n    );\n\n    if (success) {\n      dispatch?.(modalActions.closeModal());\n      dispatch?.(zipcodeActions.filterZipCode(id));\n    }\n\n    dispatch?.(modalActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  updateZipCode: async (\n    id: string,\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.put(`${url}/${id}`, data)\n    );\n    if (success) {\n      const zipcode = success.data.data;\n      dispatch?.(zipcodeActions.updateZipCode({ id, zipcode }));\n      navigate?.(\"/zip-code-management\");\n    }\n    dispatch?.(formLoaderActions.setLoading(false));\n    return [success, error];\n  },\n};\n\nexport default ZipCodeService;\n"],"names":["reduxForm","form","handleSubmit","onSubmit","ReduxFormFields","fields","Button","color","variant","type","label","name","validate","number","required","component","InputRedux","cellProps","md","props","dispatch","useAppDispatch","cityOptions","useAppSelector","state","city","useEffect","CityService","cityActions","SelectRedux","options","AddZipCodeForm","id","navigate","useNavigate","zipcode","ZipCodeService","zipcodeActions","data","code","lat","lng","cityId","change","AddZipCode","useParams","loading","formLoader","Container","maxWidth","GoBack","path","title","Banner","heading","BasicCard","CircleLoader","values","url","getCitybyID","formLoaderActions","http","Promisable","success","error","getCities","cities","createCity","deleteCity","modalActions","updateCity","getZipCodebyID","getZipCodes","zipcodes","getZipCodesRequest","requestedZipCodes","getMostRequestedZipCodes","console","log","createZipCodes","deleteZipCodes","updateZipCode"],"sourceRoot":""}