{"version":3,"file":"static/js/4667.ab5ef352.chunk.js","mappings":"4RAGe,SAASA,IAGtB,OAAO,SAACC,EAAA,EAAD,CAAaC,SAFC,SAACC,KAEsBC,SAAUC,ICDjD,IAAMA,EAA2B,CACtC,CACEC,MAAO,YACPC,KAAM,YACNC,UAAWC,EAAAA,EACXC,UAAW,CAAEC,GAAI,K,wJCyCrB,EAjDoB,CAClBC,aAAc,SAACC,GACb,MAAO,CACLA,EAAM,GAAK,IAAIC,KAAKD,EAAM,IAAIE,WAAa,GAC3CF,EAAM,GAAK,IAAIC,KAAKD,EAAM,IAAIE,WAAa,KAI/CC,cAAe,SAACH,GACd,OAAOA,EACHI,GAAAA,CAAOJ,EAAMK,QAAQ,IAAK,KAAKC,OAAO,mBACtC,IAGNC,cAAe,SAACP,GACd,OAAOA,EAAQI,GAAAA,CAAOJ,EAAMK,QAAQ,IAAK,KAAKC,OAAO,SAAW,IAGlEE,kBAAmB,SAACR,GAClB,OAAOA,EACHI,GAAAA,CAAOJ,EAAMK,QAAQ,IAAK,KAAKC,OAAO,0BACtC,IAGNG,iBAAkB,SAACT,GACjB,OAAOA,EACH,IAAIC,KAAKD,GAAOU,wBAAmBC,EAAW,CAC5CC,QAAS,QACTC,KAAM,UACNC,MAAO,QACPC,IAAK,YAEP,IAGNC,qBAAsB,SAAChB,GACrB,OAAOA,EACH,IAAIC,KAAKD,GAAOU,wBAAmBC,EAAW,CAC5CC,QAAS,QACTC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLE,KAAM,UACNC,OAAQ,UACRC,QAAQ,IAEV,KC1BO,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KACXC,GAAYC,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAWA,EAAMC,SAASC,aACrDC,GAAUJ,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAWA,EAAMC,SAASE,WAMzD,OAJAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,aAA6BT,KAC5B,CAACA,KAGF,0BACE,SAACU,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,CACE,aAAW,mBACXC,GAAI,CACFC,SAAU,OACVC,cAAe,SACfC,kBAAmB,MACnBC,eAAgB,YANpB,UASE,UAACC,EAAA,EAAD,CACEC,WAAS,EACTC,SAAU,EACVZ,QAASA,EACTa,QAAQ,wBACRC,OAAM,OAAEnB,QAAF,IAAEA,OAAF,EAAEA,EAAWmB,OALrB,WAOE,SAACC,EAAA,EAAD,WACE,UAACC,EAAA,EAAD,YACE,SAAC,KAAD,oBACA,SAAC,KAAD,yBACA,SAAC,KAAD,0BACA,SAAC,KAAD,wBACA,SAAC,KAAD,UAGJ,SAACC,EAAA,EAAD,UACGtB,EAAUuB,KAAI,SAACpB,EAAeqB,GAAhB,OACb,UAAC,KAAD,YACE,SAAC,KAAD,UAAkBrB,EAASlC,QAC3B,SAAC,KAAD,UACGkC,EAASsB,SAAW,SAAW,cAElC,SAAC,KAAD,UACGC,EAAAA,iBAA6BvB,EAASwB,cAEzC,SAAC,KAAD,UACGD,EAAAA,iBAA6BvB,EAASyB,YAEzC,SAAC,KAAD,WACE,UAACC,EAAA,EAAD,CAAOC,UAAU,MAAMC,QAAS,EAAhC,WACE,SAACC,EAAA,EAAD,CAEEC,QAAQ,YACRC,MAAM,UACNC,kBAAgB,EAChBC,QAAS,kBACPtC,EACEuC,EAAAA,GAAAA,UAAuB,CACrBC,MAAO,QACPC,KAAMC,EAAAA,GAAAA,kBACNC,KAAM,CACJC,GAAIvC,EAASwC,IACbJ,KAAMC,EAAAA,GAAAA,gBACNI,QAAS,kBACT1B,QACE,mDAKVR,GAAI,CAAEC,SAAU,QApBlB,UAsBE,SAAC,MAAD,OAEF,SAACqB,EAAA,EAAD,CAEEC,QAAQ,YACRC,MAAM,YACNC,kBAAgB,EAChBC,QAAS,kBACPxC,EAAS,oBAAD,OAAqBO,EAASwC,OAExCjC,GAAI,CAAEC,SAAU,QARlB,UAUE,SAAC,MAAD,aA/Caa,iBCpDtB,SAASqB,IACtB,IAAMjD,GAAWC,EAAAA,EAAAA,MACXM,GAAWF,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAUA,EAAMC,SAASC,aACzD,OACE,UAAC0C,EAAA,EAAD,CAAWC,SAAS,KAApB,WACE,SAACC,EAAA,EAAD,CAAQJ,QAAO,+BAA0BzC,EAASgB,OAAnC,KAAf,UACE,UAACU,EAAA,EAAD,CAAOC,UAAU,MAAMC,QAAS,EAAhC,WACE,SAACC,EAAA,EAAD,CACEE,MAAM,YACND,QAAQ,YACRvB,GAAI,CAAEuC,aAAc,QAHtB,qBAOA,SAACjB,EAAA,EAAD,CACEE,MAAM,UACND,QAAQ,YACRvB,GAAI,CAAEuC,aAAc,QACpBb,QAAS,kBAAMxC,EAAS,kBAJ1B,6BAUJ,SAACsD,EAAA,EAAD,WACE,SAACxF,EAAD,OAEF,SAACwF,EAAA,EAAD,WACE,SAACvD,EAAD,W,2HC7BFwD,EAAG,YAGH5C,EAAkB,CAEpB6C,gBAAgB,WAAD,wBAAE,WAAOV,EAAS5C,GAAhB,sFACL,OAARA,QAAQ,IAARA,GAAAA,EAAWuD,EAAAA,GAAAA,YAA2B,IAEtCC,EAAAA,EAAAA,SAHa,SAKuBC,EAAAA,EAAAA,UAChCD,EAAAA,EAAAA,IAAA,UAAYH,EAAZ,YAAmBT,KANV,sCAKNc,EALM,KAKGC,EALH,KAUTD,IACQE,EAAaF,EAAQf,KAAKA,KAA1BiB,SACA,OAAR5D,QAAQ,IAARA,GAAAA,EAAWuD,EAAAA,GAAAA,YAA4BK,KAMnC,OAAR5D,QAAQ,IAARA,GAAAA,EAAWuD,EAAAA,GAAAA,YAA2B,IAlBzB,kBAoBN,CAACG,EAASC,IApBJ,4CAAF,qDAAC,GAuBhBE,aAAa,WAAD,wBAAE,WAAO7D,GAAP,sFACF,OAARA,QAAQ,IAARA,GAAAA,EAAWuD,EAAAA,GAAAA,YAA2B,IAGtCC,EAAAA,EAAAA,SAJU,SAM0BC,EAAAA,EAAAA,UAChCD,EAAAA,EAAAA,IAAA,UAAYH,KAPN,sCAMHK,EANG,KAMMC,EANN,KAWND,IACQI,EAAcJ,EAAQf,KAAKA,KAA3BmB,UACA,OAAR9D,QAAQ,IAARA,GAAAA,EAAWuD,EAAAA,GAAAA,aAA6BO,KAMpC,OAAR9D,QAAQ,IAARA,GAAAA,EAAWuD,EAAAA,GAAAA,YAA2B,IAnB5B,kBAqBH,CAACG,EAASC,IArBP,4CAAF,mDAAC,GAwBbI,eAAe,WAAD,wBAAE,WAAOpB,EAAW3C,EAAwBF,GAA1C,oFACJ,OAARE,QAAQ,IAARA,GAAAA,EAAWgE,EAAAA,GAAAA,YAA6B,IAGxCR,EAAAA,EAAAA,SAJY,SAMwBC,EAAAA,EAAAA,UAChCD,EAAAA,EAAAA,KAAA,UAAaH,GAAOV,IAPZ,sCAMLe,EANK,KAMIC,EANJ,KAWRD,IACQ,OAAR5D,QAAQ,IAARA,GAAAA,EAAW,eAKP,OAARE,QAAQ,IAARA,GAAAA,EAAWgE,EAAAA,GAAAA,YAA6B,IAjB5B,kBAmBL,CAACN,EAASC,IAnBL,4CAAF,uDAAC,GAsBfM,eAAe,WAAD,wBAAE,WAAOrB,EAAS5C,GAAhB,oFACJ,OAARA,QAAQ,IAARA,GAAAA,EAAWuC,EAAAA,GAAAA,YAAwB,IAGnCiB,EAAAA,EAAAA,SAJY,SAMwBC,EAAAA,EAAAA,UAChCD,EAAAA,EAAAA,OAAA,UAAeH,EAAf,YAAsBT,KAPd,sCAMLc,EANK,KAMIC,EANJ,KAWRD,IACQ,OAAR1D,QAAQ,IAARA,GAAAA,EAAWuC,EAAAA,GAAAA,cACH,OAARvC,QAAQ,IAARA,GAAAA,EAAWuD,EAAAA,GAAAA,eAA+BX,KAMtC,OAAR5C,QAAQ,IAARA,GAAAA,EAAWuC,EAAAA,GAAAA,YAAwB,IAnBvB,kBAqBL,CAACmB,EAASC,IArBL,4CAAF,qDAAC,GAwBfO,eAAe,WAAD,wBAAE,WACZtB,EACAD,EACA3C,EACAF,GAJY,sFAMJ,OAARE,QAAQ,IAARA,GAAAA,EAAWgE,EAAAA,GAAAA,YAA6B,IACxCR,EAAAA,EAAAA,SAPY,SAQwBC,EAAAA,EAAAA,UAChCD,EAAAA,EAAAA,IAAA,UAAYH,EAAZ,YAAmBT,GAAMD,IATjB,sCAQLe,EARK,KAQIC,EARJ,KAWRD,IACMrD,EAAYqD,EAAQf,KAAKA,KACvB,OAAR3C,QAAQ,IAARA,GAAAA,EAAWuD,EAAAA,GAAAA,eAA+B,CAAEX,GAAAA,EAAIvC,SAAAA,KACxC,OAARP,QAAQ,IAARA,GAAAA,EAAW,eAEP,OAARE,QAAQ,IAARA,GAAAA,EAAWgE,EAAAA,GAAAA,YAA6B,IAhB5B,kBAiBL,CAACN,EAASC,IAjBL,4CAAF,yDAAC,IA4BnB","sources":["pages/CampaignsManagement/CampaignsFilters/CampaignsFilters.tsx","pages/CampaignsManagement/CampaignsFilters/index.ts","utils/date.util.ts","pages/CampaignsManagement/CampaignsList/CampaignsList.tsx","pages/CampaignsManagement/CampaignsManagement.tsx","services/campaigns.service.ts"],"sourcesContent":["import { fields } from \".\";\nimport FiltersForm from \"components/templates/FiltersForm\";\n\nexport default function CampaignsFilters() {\n  const handleSubmit = (values: any) => {};\n\n  return <FiltersForm onSubmit={handleSubmit} myFields={fields} />;\n}\n","import InputRedux from \"components/molecules/InputRedux\";\nimport { ReduxFormField } from \"components/molecules/ReduxFormFields\";\n\nexport { default } from \"./CampaignsFilters\";\n\nexport const fields: ReduxFormField[] = [\n  {\n    label: \"Page Size\",\n    name: \"page_size\",\n    component: InputRedux,\n    cellProps: { md: 4 },\n  },\n];\n","import moment from \"moment\";\n\nconst DateService = {\n  getDateRange: (value: any) => {\n    return [\n      value[0] ? new Date(value[0]).toString() : \"\",\n      value[1] ? new Date(value[1]).toString() : \"\",\n    ];\n  },\n\n  getDateString: (value: any) => {\n    return value\n      ? moment(value.replace(\"Z\", \"\")).format(\"ddd DD MMM YYYY\")\n      : \"\";\n  },\n\n  getTimeString: (value: any) => {\n    return value ? moment(value.replace(\"Z\", \"\")).format(\"HH:mm\") : \"\";\n  },\n\n  getDateTimeString: (value: any) => {\n    return value\n      ? moment(value.replace(\"Z\", \"\")).format(\"ddd DD MMM YYYY, HH:mm\")\n      : \"\";\n  },\n\n  getFormattedDate: (value: any) => {\n    return value\n      ? new Date(value).toLocaleDateString(undefined, {\n          weekday: \"short\",\n          year: \"numeric\",\n          month: \"short\",\n          day: \"numeric\",\n        })\n      : \"\";\n  },\n\n  getFormattedDateTime: (value: any) => {\n    return value\n      ? new Date(value).toLocaleDateString(undefined, {\n          weekday: \"short\",\n          year: \"numeric\",\n          month: \"short\",\n          day: \"numeric\",\n          hour: \"numeric\",\n          minute: \"numeric\",\n          hour12: false,\n        })\n      : \"\";\n  },\n};\nexport default DateService;\n","import Button from \"components/atoms/Button\";\nimport { StyledTableCell, StyledTableRow } from \"components/templates/Tables\";\nimport {\n  Table,\n  TableRow,\n  TableBody,\n  TableHead,\n  TableContainer,\n} from \"@mui/material\";\nimport Stack from \"@mui/material/Stack\";\nimport TableLoadingWrapper from \"components/templates/TableLoadingWrapper\";\nimport { BsTrashFill } from \"react-icons/bs\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport { MODAL } from \"redux/slices/modal\";\nimport { modalActions } from \"redux/slices/modal\";\nimport { useEffect } from \"react\";\nimport CampaignService from \"services/campaigns.service\";\nimport DateService from \"utils/date.util\";\n\nexport default function CampaignsList() {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const campaings = useAppSelector((state) => state.campaign.campaigns);\n  const loading = useAppSelector((state) => state.campaign.loading);\n\n  useEffect(() => {\n    CampaignService.getCampaigns(dispatch);\n  }, [dispatch]);\n\n  return (\n    <div>\n      <TableContainer>\n        <Table\n          aria-label=\"customized table\"\n          sx={{\n            minWidth: \"100%\",\n            borderSpacing: \"0 10px\",\n            borderBottomWidth: \"0px\",\n            borderCollapse: \"separate\",\n          }}\n        >\n          <TableLoadingWrapper\n            container\n            coloumns={4}\n            loading={loading}\n            message=\"No Campaign available\"\n            length={campaings?.length}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell>Name</StyledTableCell>\n                <StyledTableCell>Is Active</StyledTableCell>\n                <StyledTableCell>Start Date</StyledTableCell>\n                <StyledTableCell>End Date</StyledTableCell>\n                <StyledTableCell></StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {campaings.map((campaign: any, index: any) => (\n                <StyledTableRow key={index}>\n                  <StyledTableCell>{campaign.name}</StyledTableCell>\n                  <StyledTableCell>\n                    {campaign.isActive ? \"Active\" : \"InActive\"}\n                  </StyledTableCell>\n                  <StyledTableCell>\n                    {DateService.getFormattedDate(campaign.startDate)}\n                  </StyledTableCell>\n                  <StyledTableCell>\n                    {DateService.getFormattedDate(campaign.endDate)}\n                  </StyledTableCell>\n                  <StyledTableCell>\n                    <Stack direction=\"row\" spacing={2}>\n                      <Button\n                        // size=\"large\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disableElevation\n                        onClick={() =>\n                          dispatch(\n                            modalActions.openModal({\n                              width: \"500px\",\n                              type: MODAL.CONFIRMATION_FORM,\n                              data: {\n                                id: campaign._id,\n                                type: MODAL.DELETE_CAMPAIGN,\n                                heading: \"Delete Campaign\",\n                                message:\n                                  \"Do you really want to delete this Campaign?\",\n                              },\n                            })\n                          )\n                        }\n                        sx={{ minWidth: \"auto\" }}\n                      >\n                        <BsTrashFill />\n                      </Button>\n                      <Button\n                        // size=\"large\"\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        disableElevation\n                        onClick={() =>\n                          navigate(`/update-campaign/${campaign._id}`)\n                        }\n                        sx={{ minWidth: \"auto\" }}\n                      >\n                        <AiOutlineEdit />\n                      </Button>\n                    </Stack>\n                  </StyledTableCell>\n                </StyledTableRow>\n              ))}\n            </TableBody>\n          </TableLoadingWrapper>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","import { Container, Stack } from \"@mui/material\";\nimport Button from \"components/atoms/Button\";\nimport Banner from \"components/templates/Banner\";\nimport BasicCard from \"components/templates/BasicCard\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppSelector } from \"redux/hooks\";\nimport CampaignsFilters from \"./CampaignsFilters\";\nimport CampaignsList from \"./CampaignsList\";\n\nexport default function CampaignsManagement() {\n  const navigate = useNavigate();\n  const campaign = useAppSelector((state)=> state.campaign.campaigns)\n  return (\n    <Container maxWidth=\"lg\">\n      <Banner heading={`Campaign Management (${campaign.length})`}>\n        <Stack direction=\"row\" spacing={2}>\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            sx={{ borderRadius: \"25px\" }}\n          >\n            Export\n          </Button>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            sx={{ borderRadius: \"25px\" }}\n            onClick={() => navigate(\"/add-campaign\")}\n          >\n            + Add New\n          </Button>\n        </Stack>\n      </Banner>\n      <BasicCard>\n        <CampaignsFilters />\n      </BasicCard>\n      <BasicCard>\n        <CampaignsList />\n      </BasicCard>\n    </Container>\n  );\n}\n","import { loaderActions } from './../redux/slices/loader/loaderSlice';\nimport { campaignActions } from '../redux/slices/campaign/campaignSlice';\nimport { NavigateFunction } from 'react-router-dom';\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\nimport Promisable from \"./promisable.service\";\nimport { modalActions } from 'redux/slices/modal';\nimport { formLoaderActions } from 'redux/slices/formLoader';\n\nconst url = `/compaign`;\n\n\nconst CampaignService = {\n\n    getCampaignbyID: async (id: any, dispatch?: AppDispatch) => {\n        dispatch?.(campaignActions.setLoading(true));\n\n        http.setJWT();\n\n        const [success, error]: any = await Promisable.asPromise(\n            http.get(`${url}/${id}`)\n\n        );\n\n        if (success) {\n            const { compaign } = success.data.data;\n            dispatch?.(campaignActions.setCampaign(compaign));\n\n\n        }\n\n\n        dispatch?.(campaignActions.setLoading(false));\n\n        return [success, error];\n    },\n\n    getCampaigns: async (dispatch?: AppDispatch) => {\n        dispatch?.(campaignActions.setLoading(true));\n\n\n        http.setJWT();\n\n        const [success, error]: any = await Promisable.asPromise(\n            http.get(`${url}`)\n\n        );\n\n        if (success) {\n            const { compaigns } = success.data.data;\n            dispatch?.(campaignActions.setCampaigns(compaigns));\n\n        }\n\n\n\n        dispatch?.(campaignActions.setLoading(false));\n\n        return [success, error];\n    },\n\n    createCampaign: async (data: any, dispatch?: AppDispatch, navigate?: NavigateFunction) => {\n        dispatch?.(formLoaderActions.setLoading(true));\n\n\n        http.setJWT();\n\n        const [success, error]: any = await Promisable.asPromise(\n            http.post(`${url}`, data)\n\n        );\n\n        if (success) {\n            navigate?.(\"/campaigns\");\n\n        }\n\n\n        dispatch?.(formLoaderActions.setLoading(false));\n\n        return [success, error];\n    },\n\n    deleteCampaign: async (id: any, dispatch?: AppDispatch) => {\n        dispatch?.(modalActions.setLoading(true));\n\n\n        http.setJWT();\n\n        const [success, error]: any = await Promisable.asPromise(\n            http.delete(`${url}/${id}`)\n\n        );\n\n        if (success) {\n            dispatch?.(modalActions.closeModal())\n            dispatch?.(campaignActions.filtercampaign(id));\n\n\n        }\n\n\n        dispatch?.(modalActions.setLoading(false));\n\n        return [success, error];\n    },\n\n    updateCampaign: async (\n        id: string,\n        data: any,\n        dispatch?: AppDispatch,\n        navigate?: NavigateFunction\n    ) => {\n        dispatch?.(formLoaderActions.setLoading(true));\n        http.setJWT();\n        const [success, error]: any = await Promisable.asPromise(\n            http.put(`${url}/${id}`, data)\n        );\n        if (success) {\n            const campaign  = success.data.data;\n            dispatch?.(campaignActions.updateCampaign({ id, campaign }));\n            navigate?.(\"/campaigns\");\n        }\n        dispatch?.(formLoaderActions.setLoading(false));\n        return [success, error];\n    },\n\n\n\n\n\n\n};\n\n\nexport default CampaignService;\n\n"],"names":["CampaignsFilters","FiltersForm","onSubmit","values","myFields","fields","label","name","component","InputRedux","cellProps","md","getDateRange","value","Date","toString","getDateString","moment","replace","format","getTimeString","getDateTimeString","getFormattedDate","toLocaleDateString","undefined","weekday","year","month","day","getFormattedDateTime","hour","minute","hour12","CampaignsList","navigate","useNavigate","dispatch","useAppDispatch","campaings","useAppSelector","state","campaign","campaigns","loading","useEffect","CampaignService","TableContainer","Table","sx","minWidth","borderSpacing","borderBottomWidth","borderCollapse","TableLoadingWrapper","container","coloumns","message","length","TableHead","TableRow","TableBody","map","index","isActive","DateService","startDate","endDate","Stack","direction","spacing","Button","variant","color","disableElevation","onClick","modalActions","width","type","MODAL","data","id","_id","heading","CampaignsManagement","Container","maxWidth","Banner","borderRadius","BasicCard","url","getCampaignbyID","campaignActions","http","Promisable","success","error","compaign","getCampaigns","compaigns","createCampaign","formLoaderActions","deleteCampaign","updateCampaign"],"sourceRoot":""}