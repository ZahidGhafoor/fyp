{"version":3,"file":"static/js/5756.f9f7e7da.chunk.js","mappings":"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","sources":["pages/CityManagement/CityList/CityList.tsx","pages/CityManagement/CityManagement.tsx","services/city.service.ts"],"sourcesContent":["import { useEffect } from \"react\";\nimport { StyledTableCell, StyledTableRow } from \"components/templates/Tables\";\nimport {\n  Table,\n  TableRow,\n  TableBody,\n  TableHead,\n  TableContainer,\n} from \"@mui/material\";\nimport Stack from \"@mui/material/Stack\";\nimport { BsTrashFill } from \"react-icons/bs\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport TableLoadingWrapper from \"components/templates/TableLoadingWrapper\";\nimport Button from \"components/atoms/Button\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport { MODAL } from \"redux/slices/modal\";\nimport { modalActions } from \"redux/slices/modal\";\nimport CityService from \"services/city.service\";\n\nconst CityList = () => {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const loading = useAppSelector((state) => state.city.loading);\n  const cities = useAppSelector((state) => state.city.cities);\n\n  useEffect(() => {\n    CityService.getCities(dispatch);\n  }, [dispatch]);\n\n  return (\n    <div>\n      <TableContainer>\n        <Table\n          aria-label=\"customized table\"\n          sx={{\n            minWidth: \"100%\",\n            borderSpacing: \"0 10px\",\n            borderBottomWidth: \"0px\",\n            borderCollapse: \"separate\",\n          }}\n        >\n          <TableLoadingWrapper\n            container\n            coloumns={4}\n            loading={loading}\n            message=\"No cities available\"\n            length={cities.length}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell>Name</StyledTableCell>\n                <StyledTableCell></StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {cities.map((city: any) => (\n                <StyledTableRow key={city._id}>\n                  <StyledTableCell>{city.name}</StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    <Stack direction=\"row\" spacing={2} justifyContent=\"right\">\n                      <Button\n                        // size=\"large\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disableElevation\n                        onClick={() =>\n                          dispatch(\n                            modalActions.openModal({\n                              width: \"500px\",\n                              type: MODAL.CONFIRMATION_FORM,\n                              data: {\n                                id: city._id,\n                                type: MODAL.DELETE_CITY,\n                                heading: \"Delete City\",\n                                message:\n                                  \"Do you really want to delete this City?\",\n                              },\n                            })\n                          )\n                        }\n                        sx={{ minWidth: \"auto\" }}\n                      >\n                        <BsTrashFill />\n                      </Button>\n                      <Button\n                        // size=\"large\"\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        disableElevation\n                        onClick={() => navigate(`/update-city/${city._id}`)}\n                        sx={{ minWidth: \"auto\" }}\n                      >\n                        <AiOutlineEdit />\n                      </Button>\n                    </Stack>\n                  </StyledTableCell>\n                </StyledTableRow>\n              ))}\n            </TableBody>\n          </TableLoadingWrapper>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default CityList;\n","import { Container, Stack } from \"@mui/material\";\nimport Button from \"components/atoms/Button\";\nimport Banner from \"components/templates/Banner\";\nimport BasicCard from \"components/templates/BasicCard\";\nimport { useAppSelector } from \"redux/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport CityList from \"./CityList\";\n\nconst CityManagement = () => {\n  const cities = useAppSelector((state) => state.city.cities);\n  const navigate = useNavigate();\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Banner heading={`City Management (${cities.length})`}>\n        <Stack direction=\"row\" spacing={2}>\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            sx={{ borderRadius: \"25px\" }}\n          >\n            Export\n          </Button>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            sx={{ borderRadius: \"25px\" }}\n            onClick={() => navigate(\"/add-city\")}\n          >\n            + Add New\n          </Button>\n        </Stack>\n      </Banner>\n      <BasicCard>\n        <CityList />\n      </BasicCard>\n    </Container>\n  );\n};\n\nexport default CityManagement;\n","import { NavigateFunction } from \"react-router-dom\";\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\nimport Promisable from \"./promisable.service\";\nimport { modalActions } from \"redux/slices/modal\";\nimport { formLoaderActions } from \"redux/slices/formLoader\";\nimport { cityActions } from \"redux/slices/city/citySlice\";\n\nconst url = `/city`;\n\nconst CityService = {\n  getCitybyID: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/${id}`)\n    );\n\n    if (success) {\n      const { city } = success.data.data;\n      dispatch?.(cityActions.setCity(city));\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  getCities: async (dispatch?: AppDispatch) => {\n    dispatch?.(cityActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}`)\n    );\n\n    if (success) {\n      const { cities } = success.data.data;\n      dispatch?.(cityActions.setCities(cities));\n    }\n\n    dispatch?.(cityActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  createCity: async (\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}`, data)\n    );\n\n    if (success) {\n      navigate?.(\"/city-management\");\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  deleteCity: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(modalActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.delete(`${url}/${id}`)\n    );\n\n    if (success) {\n      dispatch?.(modalActions.closeModal());\n      dispatch?.(cityActions.filterCity(id));\n    }\n\n    dispatch?.(modalActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  updateCity: async (\n    id: string,\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.put(`${url}/${id}`, data)\n    );\n    if (success) {\n      const city = success.data.data;\n      dispatch?.(cityActions.updateCity({ id, city }));\n      navigate?.(\"/city-management\");\n    }\n    dispatch?.(formLoaderActions.setLoading(false));\n    return [success, error];\n  },\n};\n\nexport default CityService;\n"],"names":["navigate","useNavigate","dispatch","useAppDispatch","loading","useAppSelector","state","city","cities","useEffect","CityService","TableContainer","Table","sx","minWidth","borderSpacing","borderBottomWidth","borderCollapse","TableLoadingWrapper","container","coloumns","message","length","TableHead","TableRow","TableBody","map","name","align","Stack","direction","spacing","justifyContent","Button","variant","color","disableElevation","onClick","modalActions","width","type","MODAL","data","id","_id","heading","Container","maxWidth","Banner","borderRadius","BasicCard","url","getCitybyID","formLoaderActions","http","Promisable","success","error","cityActions","getCities","createCity","deleteCity","updateCity"],"sourceRoot":""}