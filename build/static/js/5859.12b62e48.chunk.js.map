{"version":3,"file":"static/js/5859.12b62e48.chunk.js","mappings":"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","sources":["pages/AddCity/AddCityForm/AddCityForm.tsx","pages/AddCity/AddCityForm/index.ts","pages/AddCity/UpdateCityForm/UpdateCityForm.tsx","pages/AddCity/AddCity.tsx","services/city.service.ts"],"sourcesContent":["import ReduxFormFields from \"components/molecules/ReduxFormFields\";\nimport { reduxForm } from \"redux-form\";\nimport { fields} from \".\";\nimport Button from \"components/atoms/Button\";\n\n\nconst AddCityForm  = ({ handleSubmit }: any) =>  {\n    return (\n        <form\n          onSubmit={handleSubmit}\n        >\n          <ReduxFormFields fields={fields} />\n          <br />\n          <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n            Submit\n          </Button>\n        </form>\n      );\n}\n\nexport default reduxForm({\n    form: \"AddCityForm\",\n  })(AddCityForm);","import InputRedux from \"components/molecules/InputRedux\";\nimport { ReduxFormField } from \"components/molecules/ReduxFormFields\";\nimport { required } from \"utils/validate.util\";\n\nexport { default } from \"./AddCityForm\";\n\nexport const fields: ReduxFormField[] = [\n  {\n    label: \"City Name\",\n    name: \"name\",\n    validate: [required],\n    component: InputRedux,\n    cellProps: { md: 6 },\n  },\n];\n","import { useEffect } from \"react\";\nimport { change } from \"redux-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport CityService from \"services/city.service\";\nimport { cityActions } from \"redux/slices/city/citySlice\";\n\nexport default function AddCityForm({ id }: any) {\n  const form = \"AddCityForm\";\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const city = useAppSelector((state) => state.city.city);\n\n  useEffect(() => {\n    CityService.getCitybyID(`${id}`, dispatch);\n    return () => {\n      dispatch(cityActions.setCity(null));\n    };\n  }, [id, dispatch]);\n\n  useEffect(() => {\n    if (!city || city?.data === \"Not Found\") return;\n    const { name } = city;\n    dispatch(change(form, \"name\", name));\n  }, [city, navigate, dispatch]);\n\n  return null;\n}\n","import { Container } from \"@mui/material\";\nimport CircleLoader from \"components/atoms/CircleLoader\";\nimport GoBack from \"components/atoms/GoBack\";\nimport Banner from \"components/templates/Banner\";\nimport BasicCard from \"components/templates/BasicCard\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport CityService from \"services/city.service\";\nimport AddCityForm from \"./AddCityForm\";\nimport UpdateCityForm from \"./UpdateCityForm\";\n\nexport default function AddCity() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const loading = useAppSelector((state) => state.formLoader.loading);\n\n  const handleSubmit = (values: any) => {\n    if (id) CityService.updateCity(`${id}`, values, dispatch, navigate);\n    else CityService.createCity(values, dispatch, navigate);\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <GoBack path=\"/city-management\" title=\"Cities\" />\n      <Banner heading={`${id ? \"Update\" : \"Add\"} City`} />\n      <BasicCard>\n        {loading && <CircleLoader />}\n        <AddCityForm onSubmit={handleSubmit} />\n        {id && <UpdateCityForm id={id} />}\n      </BasicCard>\n    </Container>\n  );\n}\n","import { NavigateFunction } from \"react-router-dom\";\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\nimport Promisable from \"./promisable.service\";\nimport { modalActions } from \"redux/slices/modal\";\nimport { formLoaderActions } from \"redux/slices/formLoader\";\nimport { cityActions } from \"redux/slices/city/citySlice\";\n\nconst url = `/city`;\n\nconst CityService = {\n  getCitybyID: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/${id}`)\n    );\n\n    if (success) {\n      const { city } = success.data.data;\n      dispatch?.(cityActions.setCity(city));\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  getCities: async (dispatch?: AppDispatch) => {\n    dispatch?.(cityActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}`)\n    );\n\n    if (success) {\n      const { cities } = success.data.data;\n      dispatch?.(cityActions.setCities(cities));\n    }\n\n    dispatch?.(cityActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  createCity: async (\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}`, data)\n    );\n\n    if (success) {\n      navigate?.(\"/city-management\");\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  deleteCity: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(modalActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.delete(`${url}/${id}`)\n    );\n\n    if (success) {\n      dispatch?.(modalActions.closeModal());\n      dispatch?.(cityActions.filterCity(id));\n    }\n\n    dispatch?.(modalActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  updateCity: async (\n    id: string,\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.put(`${url}/${id}`, data)\n    );\n    if (success) {\n      const city = success.data.data;\n      dispatch?.(cityActions.updateCity({ id, city }));\n      navigate?.(\"/city-management\");\n    }\n    dispatch?.(formLoaderActions.setLoading(false));\n    return [success, error];\n  },\n};\n\nexport default CityService;\n"],"names":["reduxForm","form","handleSubmit","onSubmit","ReduxFormFields","fields","Button","color","variant","type","label","name","validate","required","component","InputRedux","cellProps","md","AddCityForm","id","navigate","useNavigate","dispatch","useAppDispatch","city","useAppSelector","state","useEffect","CityService","cityActions","data","change","AddCity","useParams","loading","formLoader","Container","maxWidth","GoBack","path","title","Banner","heading","BasicCard","CircleLoader","values","url","getCitybyID","formLoaderActions","http","Promisable","success","error","getCities","cities","createCity","deleteCity","modalActions","updateCity"],"sourceRoot":""}