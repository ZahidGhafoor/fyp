{"version":3,"file":"static/js/5280.51f11b73.chunk.js","mappings":"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","sources":["pages/AddAccountMang/AddAccountMangForm/AddAccountMangForm.tsx","pages/AddAccountMang/AddAccountMangForm/index.ts","components/organisms/SelectRoles/SelectRoles.tsx","pages/AddAccountMang/UpdateAccountForm/UpdateAccountForm.tsx","pages/AddAccountMang/AddAccountMang.tsx"],"sourcesContent":["import Button from \"components/atoms/Button\";\nimport ReduxFormFields from \"components/molecules/ReduxFormFields\";\nimport { reduxForm } from \"redux-form\";\nimport { fields} from \".\";\n\nconst AddAccountMangForm = ({ handleSubmit }: any) => {\n  return (\n    <form\n      onSubmit={handleSubmit}\n    >\n      <ReduxFormFields fields={fields} />\n      <br />\n      <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n        Submit\n      </Button>\n    </form>\n  );\n};\n\nexport default reduxForm({\n  form: \"AddAccountMangForm\",\n})(AddAccountMangForm);\n","import InputRedux from \"components/molecules/InputRedux\";\nimport { ReduxFormField } from \"components/molecules/ReduxFormFields\";\nimport SelectRoles from \"components/organisms/SelectRoles\";\nimport { required, phoneSimple, email } from \"utils/validate.util\";\n\nexport { default } from \"./AddAccountMangForm\";\n\nexport const fields: ReduxFormField[] = [\n  {\n    name: \"firstName\",\n    label: \"First Name\",\n    component: InputRedux,\n    cellProps: { md: 6 },\n    validate: [required],\n  },\n\n  {\n    name: \"lastName\",\n    label: \"Last Name\",\n    component: InputRedux,\n    cellProps: { md: 6 },\n    validate: [required],\n  },\n\n  {\n    name: \"email\",\n    label: \"Email\",\n    component: InputRedux,\n    cellProps: { md: 6 },\n    validate: [required, email],\n  },\n\n  {\n    name: \"phone\",\n    label: \"Phone\",\n    component: InputRedux,\n    cellProps: { md: 6 },\n    validate: [required, phoneSimple],\n  },\n  {\n    name: \"roleId\",\n    label: \"Role\",\n    component: SelectRoles,\n    validate: [required],\n\n    cellProps: { md: 6 },\n  },\n];\n","import { useEffect } from \"react\";\nimport SelectRedux from \"components/molecules/SelectRedux\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport RoleService from \"services/role.service\";\n\nexport default function SelectRoles(props: any) {\n  const dispatch = useAppDispatch();\n  const rolesOptions = useAppSelector((state) => state.role.roleOptions);\n\n  useEffect(() => {\n    RoleService.getRoles(dispatch);\n  }, [dispatch]);\n\n  return <SelectRedux {...props} options={rolesOptions} />;\n}\n","import { useEffect } from \"react\";\nimport { change } from \"redux-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport ZipCodeService from \"services/zipcode.service\";\nimport { zipcodeActions } from \"redux/slices/zipcode/zipcodeSlice\";\nimport StoresService from \"services/store.service\";\nimport { storeActions } from \"redux/slices/store/storeSlice\";\nimport AuthService from \"services/auth.service\";\nimport { authActions } from \"redux/slices/auth\";\n\nexport default function AddAccountMangForm({ id }: any) {\n  const form = \"AddAccountMangForm\";\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const user = useAppSelector((state) => state.auth.singleUser);\n\n  useEffect(() => {\n    AuthService.getUserbyID(`${id}`, dispatch);\n    return () => {\n      dispatch(authActions.setSingleUser(null));\n    };\n  }, [id, dispatch]);\n\n  useEffect(() => {\n    if (!user || user?.data === \"Not Found\") return;\n    const { email, firstName, lastName, roleId, phone } = user;\n\n    dispatch(change(form, \"email\", email));\n    dispatch(change(form, \"firstName\", firstName));\n    dispatch(change(form, \"lastName\", lastName));\n    dispatch(change(form, \"roleId\", roleId));\n    dispatch(change(form, \"phone\", phone));\n  }, [user, navigate, dispatch]);\n\n  return null;\n}\n","import { Container } from \"@mui/material\";\nimport GoBack from \"components/atoms/GoBack\";\nimport Banner from \"components/templates/Banner\";\nimport BasicCard from \"components/templates/BasicCard\";\nimport AuthService from \"services/auth.service\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport AddAccountMangForm from \"./AddAccountMangForm\";\nimport CircleLoader from \"components/atoms/CircleLoader\";\nimport UpdateAccountForm from \"./UpdateAccountForm\";\n\nexport default function AddAccountMang() {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const { id } = useParams();\n\n  const loading = useAppSelector((state) => state.formLoader.loading);\n\n  const handleSubmit = (values: any) => {\n    if (id) AuthService.updateUser(`${id}`, values, dispatch, navigate);\n    else AuthService.createUser(values, dispatch, navigate);\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <GoBack path=\"/account-management\" title=\"List\" />\n      <Banner heading={`${!id ? \"Add New\" : \"Update\"} Account`}></Banner>\n      <BasicCard>\n        {loading && <CircleLoader />}\n        <AddAccountMangForm onSubmit={handleSubmit} />\n        {id && <UpdateAccountForm id={id} />}\n      </BasicCard>\n    </Container>\n  );\n}\n"],"names":["reduxForm","form","handleSubmit","onSubmit","ReduxFormFields","fields","Button","color","variant","type","name","label","component","InputRedux","cellProps","md","validate","required","email","phoneSimple","props","dispatch","useAppDispatch","rolesOptions","useAppSelector","state","role","roleOptions","useEffect","RoleService","SelectRedux","options","AddAccountMangForm","id","navigate","useNavigate","user","auth","singleUser","AuthService","authActions","data","firstName","lastName","roleId","phone","change","AddAccountMang","useParams","loading","formLoader","Container","maxWidth","GoBack","path","title","Banner","heading","BasicCard","CircleLoader","values"],"sourceRoot":""}