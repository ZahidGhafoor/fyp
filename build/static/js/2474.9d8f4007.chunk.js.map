{"version":3,"file":"static/js/2474.9d8f4007.chunk.js","mappings":"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","sources":["pages/ZipCodeManagement/ZipCodeLIst/ZipCodeList.tsx","pages/ZipCodeManagement/ZipCodeFilters/index.ts","components/organisms/SelectStore/SelectStore.tsx","pages/ZipCodeManagement/ZipCodeFilters/ZipCodeFilter.tsx","pages/ZipCodeManagement/ZipCodeManagement.tsx","services/store.service.ts","services/zipcode.service.ts"],"sourcesContent":["import { useEffect } from \"react\";\nimport { StyledTableCell, StyledTableRow } from \"components/templates/Tables\";\nimport {\n  Table,\n  TableRow,\n  TableBody,\n  TableHead,\n  TableContainer,\n} from \"@mui/material\";\nimport Stack from \"@mui/material/Stack\";\nimport { BsTrashFill } from \"react-icons/bs\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport TableLoadingWrapper from \"components/templates/TableLoadingWrapper\";\nimport Button from \"components/atoms/Button\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport ZipCodeService from \"services/zipcode.service\";\nimport { MODAL } from \"redux/slices/modal\";\nimport { modalActions } from \"redux/slices/modal\";\nimport { zipcodeActions } from \"redux/slices/zipcode/zipcodeSlice\";\n\nconst ZipCodeList = () => {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const loading = useAppSelector((state) => state.zipcode.loading);\n  const zipcodes = useAppSelector((state) => state.zipcode.zipcodes);\n  const filter = useAppSelector((state) => state.zipcode.filter);\n  const refreshLoader = useAppSelector((state) => state.zipcode.refreshLoader);\n\n  useEffect(() => {\n    ZipCodeService.getZipCodes(filter, dispatch);\n  }, [filter, dispatch]);\n\n  return (\n    <div>\n      <TableContainer>\n        <Table\n          aria-label=\"customized table\"\n          sx={{\n            minWidth: \"100%\",\n            borderSpacing: \"0 10px\",\n            borderBottomWidth: \"0px\",\n            borderCollapse: \"separate\",\n          }}\n        >\n          <TableLoadingWrapper\n            container\n            coloumns={4}\n            loading={loading}\n            message=\"No zipcodes available\"\n            length={refreshLoader ? 0 : zipcodes.length}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell>Zip Code</StyledTableCell>\n                <StyledTableCell>Neighborhood</StyledTableCell>\n                <StyledTableCell>Store Name</StyledTableCell>\n                <StyledTableCell></StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {zipcodes.map((zipcode: any, i: number) => (\n                <StyledTableRow key={i}>\n                  <StyledTableCell>{zipcode.code}</StyledTableCell>\n                  <StyledTableCell>{zipcode.cityName}</StyledTableCell>\n                  <StyledTableCell>{zipcode.store}</StyledTableCell>\n                  <StyledTableCell align=\"right\">\n                    <Stack direction=\"row\" spacing={2} justifyContent=\"right\">\n                      <Button\n                        // size=\"large\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disableElevation\n                        onClick={() =>\n                          dispatch(\n                            modalActions.openModal({\n                              width: \"500px\",\n                              type: MODAL.CONFIRMATION_FORM,\n                              data: {\n                                id: zipcode._id,\n                                type: MODAL.DELETE_ZIPCODE,\n                                heading: \"Delete Zip Code\",\n                                message:\n                                  \"Do you really want to delete this Zip Code?\",\n                              },\n                            })\n                          )\n                        }\n                        sx={{ minWidth: \"auto\" }}\n                      >\n                        <BsTrashFill />\n                      </Button>\n                      <Button\n                        // size=\"large\"\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        disableElevation\n                        onClick={() =>\n                          navigate(`/update-zipcode/${zipcode._id}`)\n                        }\n                        sx={{ minWidth: \"auto\" }}\n                      >\n                        <AiOutlineEdit />\n                      </Button>\n                    </Stack>\n                  </StyledTableCell>\n                </StyledTableRow>\n              ))}\n            </TableBody>\n          </TableLoadingWrapper>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default ZipCodeList;\n","import SelectStore from \"components/organisms/SelectStore\";\nimport InputRedux from \"components/molecules/InputRedux\";\nimport { ReduxFormField } from \"components/molecules/ReduxFormFields\";\nimport SelectRedux from \"components/molecules/SelectRedux\";\nimport { number, required } from \"utils/validate.util\";\n\nexport { default } from \"./ZipCodeFilter\";\n\nexport const fields: ReduxFormField[] = [\n  {\n    name: \"code\",\n    label: \"Zip Code\",\n    validate: [number],\n    component: InputRedux,\n    cellProps: { md: 4 },\n  },\n  {\n    name: \"store\",\n    label: \"Store\",\n    component: SelectStore,\n    cellProps: { md: 4 },\n  },\n\n  {\n    label: \"Page Size\",\n    name: \"pageSize\",\n    component: InputRedux,\n    validate: [number],\n    cellProps: { md: 4 },\n  },\n];\n","import { useEffect } from \"react\";\nimport SelectRedux from \"components/molecules/SelectRedux\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport StoresService from \"services/store.service\";\n\nexport default function SelectStore(props: any) {\n  const dispatch = useAppDispatch();\n  const storeOptions = useAppSelector((state) => state.store.storeOptions);\n\n  useEffect(() => {\n    StoresService.getStores(dispatch);\n  }, [dispatch]);\n\n  return <SelectRedux {...props} options={storeOptions} />;\n}\n","import { fields } from \".\";\nimport { useAppDispatch } from \"redux/hooks\";\nimport FiltersForm from \"components/templates/FiltersForm\";\nimport { zipcodeActions } from \"redux/slices/zipcode/zipcodeSlice\";\nimport { reset } from \"redux-form\";\n\nexport default function ZipCodeFilter() {\n  const dispatch = useAppDispatch();\n  const form = \"zipFiltersForm\";\n\n  const handleSubmit = (values: any) => {\n    const data = { ...values };\n\n    if (data.code) data.code = Number(data.code);\n    if (data.pageSize) data.pageSize = Number(data.pageSize);\n\n    dispatch(zipcodeActions.setFilter({ filters: data }));\n  };\n\n  return (\n    <FiltersForm\n      myFields={fields}\n      onSubmit={handleSubmit}\n      onClickReset={() => {\n        dispatch(reset(form));\n        dispatch(zipcodeActions.setFilter({}));\n      }}\n      form={form}\n    />\n  );\n}\n","import { Container, Stack } from \"@mui/material\";\nimport Button from \"components/atoms/Button\";\nimport Banner from \"components/templates/Banner\";\nimport BasicCard from \"components/templates/BasicCard\";\nimport ZipCodeList from \"./ZipCodeLIst/ZipCodeList\";\nimport ZipCodeFilter from \"./ZipCodeFilters/ZipCodeFilter\";\nimport { useAppSelector } from \"redux/hooks\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst ZipCodeManagement = () => {\n  const zipcodes = useAppSelector((state) => state.zipcode.zipcodes);\n  const navigate = useNavigate();\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Banner heading={`Zip Code Management (${zipcodes.length})`}>\n        <Stack direction=\"row\" spacing={2}>\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            sx={{ borderRadius: \"25px\" }}\n          >\n            Export\n          </Button>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            sx={{ borderRadius: \"25px\" }}\n            onClick={() => navigate(\"/add-zipCode\")}\n          >\n            + Add New\n          </Button>\n        </Stack>\n      </Banner>\n      <BasicCard>\n        <ZipCodeFilter />\n      </BasicCard>\n      <BasicCard>\n        <ZipCodeList />\n      </BasicCard>\n    </Container>\n  );\n};\n\nexport default ZipCodeManagement;\n","import { zipcodeActions } from \"redux/slices/zipcode/zipcodeSlice\";\nimport { formLoaderActions } from \"redux/slices/formLoader\";\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\n\nimport { storeActions } from \"redux/slices/store/storeSlice\";\n\nimport Promisable from \"./promisable.service\";\nimport { NavigateFunction } from \"react-router-dom\";\nimport { modalActions } from \"redux/slices/modal\";\n\nconst url = \"/store\";\n\nconst StoresService = {\n  getStorebyID: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/${id}`)\n    );\n\n    if (success) {\n      const { store } = success.data.data;\n      dispatch?.(storeActions.setStore(store));\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  getStores: async (data: any, dispatch?: AppDispatch) => {\n    dispatch?.(storeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}/filter`, data)\n    );\n\n    if (success) {\n      const { stores } = success.data.data;\n      dispatch?.(storeActions.setStores(stores));\n    }\n\n    dispatch?.(storeActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  addStore: async (\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(storeActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}`, data)\n    );\n    if (success) {\n      const store = success.data.data.store;\n      dispatch?.(storeActions.addStore(store));\n      navigate?.(\"/store-management\");\n    }\n    dispatch?.(storeActions.setLoading(false));\n    return [success, error];\n  },\n\n  deleteStore: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(modalActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.delete(`${url}/${id}`)\n    );\n\n    if (success) {\n      dispatch?.(modalActions.closeModal());\n      dispatch?.(storeActions.deleteStore(id));\n    }\n    dispatch?.(modalActions.setLoading(false));\n    return [success, error];\n  },\n\n  updateStore: async (\n    id: string,\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.put(`${url}/${id}`, data)\n    );\n    if (success) {\n      const store = success.data.data;\n      dispatch?.(storeActions.updateStore({ id, store }));\n      navigate?.(\"/store-management\");\n    }\n    dispatch?.(formLoaderActions.setLoading(false));\n    return [success, error];\n  },\n};\n\nexport default StoresService;\n","import { NavigateFunction } from \"react-router-dom\";\nimport { zipcodeActions } from \"./../redux/slices/zipcode/zipcodeSlice\";\nimport http from \"./http.service\";\nimport { AppDispatch } from \"redux/store\";\nimport Promisable from \"./promisable.service\";\nimport { modalActions } from \"redux/slices/modal\";\nimport { formLoaderActions } from \"redux/slices/formLoader\";\n\nconst url = `/zipcode`;\n\nconst ZipCodeService = {\n  getZipCodebyID: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/${id}`)\n    );\n\n    if (success) {\n      const { zipcode } = success.data.data;\n      dispatch?.(zipcodeActions.setZipCode(zipcode));\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  getZipCodes: async (data: any, dispatch?: AppDispatch) => {\n    dispatch?.(zipcodeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}/filter`, data)\n    );\n\n    if (success) {\n      const { zipcodes } = success.data.data;\n      dispatch?.(zipcodeActions.setZipCodes(zipcodes));\n    }\n\n    dispatch?.(zipcodeActions.setLoading(false));\n\n    return [success, error];\n  },\n  getZipCodesRequest: async (dispatch?: AppDispatch) => {\n    dispatch?.(zipcodeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/all-requested-zipcodes`)\n    );\n\n    if (success) {\n      const { requestedZipCodes } = success.data.data;\n      dispatch?.(zipcodeActions.setZipCodesRequest(requestedZipCodes));\n    }\n\n    dispatch?.(zipcodeActions.setLoading(false));\n\n    return [success, error];\n  },\n  getMostRequestedZipCodes: async (dispatch?: AppDispatch) => {\n    dispatch?.(zipcodeActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.get(`${url}/requested-zipcodes-group`)\n    );\n\n    if (success) {\n      const { requestedZipCodes } = success.data.data;\n      dispatch?.(zipcodeActions.setmostRequestZipCodes(requestedZipCodes));\n\n      console.log(\"our bje are ======\", requestedZipCodes);\n    }\n\n    dispatch?.(zipcodeActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  createZipCodes: async (\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.post(`${url}`, data)\n    );\n\n    if (success) {\n      navigate?.(\"/zip-code-management\");\n    }\n\n    dispatch?.(formLoaderActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  deleteZipCodes: async (id: any, dispatch?: AppDispatch) => {\n    dispatch?.(modalActions.setLoading(true));\n\n    http.setJWT();\n\n    const [success, error]: any = await Promisable.asPromise(\n      http.delete(`${url}/${id}`)\n    );\n\n    if (success) {\n      dispatch?.(modalActions.closeModal());\n      dispatch?.(zipcodeActions.filterZipCode(id));\n    }\n\n    dispatch?.(modalActions.setLoading(false));\n\n    return [success, error];\n  },\n\n  updateZipCode: async (\n    id: string,\n    data: any,\n    dispatch?: AppDispatch,\n    navigate?: NavigateFunction\n  ) => {\n    dispatch?.(formLoaderActions.setLoading(true));\n    http.setJWT();\n    const [success, error]: any = await Promisable.asPromise(\n      http.put(`${url}/${id}`, data)\n    );\n    if (success) {\n      const zipcode = success.data.data;\n      dispatch?.(zipcodeActions.updateZipCode({ id, zipcode }));\n      navigate?.(\"/zip-code-management\");\n    }\n    dispatch?.(formLoaderActions.setLoading(false));\n    return [success, error];\n  },\n};\n\nexport default ZipCodeService;\n"],"names":["navigate","useNavigate","dispatch","useAppDispatch","loading","useAppSelector","state","zipcode","zipcodes","filter","refreshLoader","useEffect","ZipCodeService","TableContainer","Table","sx","minWidth","borderSpacing","borderBottomWidth","borderCollapse","TableLoadingWrapper","container","coloumns","message","length","TableHead","TableRow","TableBody","map","i","code","cityName","store","align","Stack","direction","spacing","justifyContent","Button","variant","color","disableElevation","onClick","modalActions","width","type","MODAL","data","id","_id","heading","fields","name","label","validate","number","component","InputRedux","cellProps","md","props","storeOptions","StoresService","SelectRedux","options","ZipCodeFilter","form","FiltersForm","myFields","onSubmit","values","Number","pageSize","zipcodeActions","filters","onClickReset","reset","Container","maxWidth","Banner","borderRadius","BasicCard","url","getStorebyID","formLoaderActions","http","Promisable","success","error","storeActions","getStores","stores","addStore","deleteStore","updateStore","getZipCodebyID","getZipCodes","getZipCodesRequest","requestedZipCodes","getMostRequestedZipCodes","console","log","createZipCodes","deleteZipCodes","updateZipCode"],"sourceRoot":""}